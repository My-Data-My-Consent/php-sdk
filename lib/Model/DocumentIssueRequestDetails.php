<?php
/**
 * DocumentIssueRequestDetails
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDataMyConsent
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * My Data My Consent - Developer API
 *
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDataMyConsent\Model;

use \ArrayAccess;
use \MyDataMyConsent\ObjectSerializer;

/**
 * DocumentIssueRequestDetails Class Doc Comment
 *
 * @category Class
 * @description DocumentIssueRequestDetails : Document issue request details.
 * @package  MyDataMyConsent
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DocumentIssueRequestDetails implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DocumentIssueRequestDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'document_type_id' => 'string',
        'type_name' => 'string',
        'identifier' => 'string',
        'status' => '\MyDataMyConsent\Model\DocumentIssueRequestStatus',
        'description' => 'string',
        'receiver' => '\MyDataMyConsent\Model\DocumentIssueRequestDetailsReceiver',
        'payment_request' => '\MyDataMyConsent\Model\PaymentRequest',
        'issued_at_utc' => '\DateTime',
        'valid_from_utc' => '\DateTime',
        'expires_at_utc' => '\DateTime',
        'meta_data' => 'mixed',
        'created_at_utc' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'document_type_id' => null,
        'type_name' => null,
        'identifier' => null,
        'status' => null,
        'description' => null,
        'receiver' => null,
        'payment_request' => null,
        'issued_at_utc' => 'date-time',
        'valid_from_utc' => 'date-time',
        'expires_at_utc' => 'date-time',
        'meta_data' => null,
        'created_at_utc' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'document_type_id' => false,
		'type_name' => false,
		'identifier' => false,
		'status' => false,
		'description' => false,
		'receiver' => false,
		'payment_request' => false,
		'issued_at_utc' => false,
		'valid_from_utc' => false,
		'expires_at_utc' => false,
		'meta_data' => true,
		'created_at_utc' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'document_type_id' => 'documentTypeId',
        'type_name' => 'typeName',
        'identifier' => 'identifier',
        'status' => 'status',
        'description' => 'description',
        'receiver' => 'receiver',
        'payment_request' => 'paymentRequest',
        'issued_at_utc' => 'issuedAtUtc',
        'valid_from_utc' => 'validFromUtc',
        'expires_at_utc' => 'expiresAtUtc',
        'meta_data' => 'metaData',
        'created_at_utc' => 'createdAtUtc'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'document_type_id' => 'setDocumentTypeId',
        'type_name' => 'setTypeName',
        'identifier' => 'setIdentifier',
        'status' => 'setStatus',
        'description' => 'setDescription',
        'receiver' => 'setReceiver',
        'payment_request' => 'setPaymentRequest',
        'issued_at_utc' => 'setIssuedAtUtc',
        'valid_from_utc' => 'setValidFromUtc',
        'expires_at_utc' => 'setExpiresAtUtc',
        'meta_data' => 'setMetaData',
        'created_at_utc' => 'setCreatedAtUtc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'document_type_id' => 'getDocumentTypeId',
        'type_name' => 'getTypeName',
        'identifier' => 'getIdentifier',
        'status' => 'getStatus',
        'description' => 'getDescription',
        'receiver' => 'getReceiver',
        'payment_request' => 'getPaymentRequest',
        'issued_at_utc' => 'getIssuedAtUtc',
        'valid_from_utc' => 'getValidFromUtc',
        'expires_at_utc' => 'getExpiresAtUtc',
        'meta_data' => 'getMetaData',
        'created_at_utc' => 'getCreatedAtUtc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('document_type_id', $data ?? [], null);
        $this->setIfExists('type_name', $data ?? [], null);
        $this->setIfExists('identifier', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('receiver', $data ?? [], null);
        $this->setIfExists('payment_request', $data ?? [], null);
        $this->setIfExists('issued_at_utc', $data ?? [], null);
        $this->setIfExists('valid_from_utc', $data ?? [], null);
        $this->setIfExists('expires_at_utc', $data ?? [], null);
        $this->setIfExists('meta_data', $data ?? [], null);
        $this->setIfExists('created_at_utc', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['document_type_id'] === null) {
            $invalidProperties[] = "'document_type_id' can't be null";
        }
        if ($this->container['type_name'] === null) {
            $invalidProperties[] = "'type_name' can't be null";
        }
        if ($this->container['identifier'] === null) {
            $invalidProperties[] = "'identifier' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        if ($this->container['description'] === null) {
            $invalidProperties[] = "'description' can't be null";
        }
        if ($this->container['receiver'] === null) {
            $invalidProperties[] = "'receiver' can't be null";
        }
        if ($this->container['issued_at_utc'] === null) {
            $invalidProperties[] = "'issued_at_utc' can't be null";
        }
        if ($this->container['valid_from_utc'] === null) {
            $invalidProperties[] = "'valid_from_utc' can't be null";
        }
        if ($this->container['created_at_utc'] === null) {
            $invalidProperties[] = "'created_at_utc' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Document issue request Id.
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets document_type_id
     *
     * @return string
     */
    public function getDocumentTypeId()
    {
        return $this->container['document_type_id'];
    }

    /**
     * Sets document_type_id
     *
     * @param string $document_type_id Document type Id.
     *
     * @return self
     */
    public function setDocumentTypeId($document_type_id)
    {

        if (is_null($document_type_id)) {
            throw new \InvalidArgumentException('non-nullable document_type_id cannot be null');
        }

        $this->container['document_type_id'] = $document_type_id;

        return $this;
    }

    /**
     * Gets type_name
     *
     * @return string
     */
    public function getTypeName()
    {
        return $this->container['type_name'];
    }

    /**
     * Sets type_name
     *
     * @param string $type_name Document type name.
     *
     * @return self
     */
    public function setTypeName($type_name)
    {

        if (is_null($type_name)) {
            throw new \InvalidArgumentException('non-nullable type_name cannot be null');
        }

        $this->container['type_name'] = $type_name;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return string
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string $identifier Document identifier.
     *
     * @return self
     */
    public function setIdentifier($identifier)
    {

        if (is_null($identifier)) {
            throw new \InvalidArgumentException('non-nullable identifier cannot be null');
        }

        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \MyDataMyConsent\Model\DocumentIssueRequestStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \MyDataMyConsent\Model\DocumentIssueRequestStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {

        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Document description.
     *
     * @return self
     */
    public function setDescription($description)
    {

        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets receiver
     *
     * @return \MyDataMyConsent\Model\DocumentIssueRequestDetailsReceiver
     */
    public function getReceiver()
    {
        return $this->container['receiver'];
    }

    /**
     * Sets receiver
     *
     * @param \MyDataMyConsent\Model\DocumentIssueRequestDetailsReceiver $receiver receiver
     *
     * @return self
     */
    public function setReceiver($receiver)
    {

        if (is_null($receiver)) {
            throw new \InvalidArgumentException('non-nullable receiver cannot be null');
        }

        $this->container['receiver'] = $receiver;

        return $this;
    }

    /**
     * Gets payment_request
     *
     * @return \MyDataMyConsent\Model\PaymentRequest|null
     */
    public function getPaymentRequest()
    {
        return $this->container['payment_request'];
    }

    /**
     * Sets payment_request
     *
     * @param \MyDataMyConsent\Model\PaymentRequest|null $payment_request payment_request
     *
     * @return self
     */
    public function setPaymentRequest($payment_request)
    {

        if (is_null($payment_request)) {
            throw new \InvalidArgumentException('non-nullable payment_request cannot be null');
        }

        $this->container['payment_request'] = $payment_request;

        return $this;
    }

    /**
     * Gets issued_at_utc
     *
     * @return \DateTime
     */
    public function getIssuedAtUtc()
    {
        return $this->container['issued_at_utc'];
    }

    /**
     * Sets issued_at_utc
     *
     * @param \DateTime $issued_at_utc Datetime of issue in UTC timezone.
     *
     * @return self
     */
    public function setIssuedAtUtc($issued_at_utc)
    {

        if (is_null($issued_at_utc)) {
            throw new \InvalidArgumentException('non-nullable issued_at_utc cannot be null');
        }

        $this->container['issued_at_utc'] = $issued_at_utc;

        return $this;
    }

    /**
     * Gets valid_from_utc
     *
     * @return \DateTime
     */
    public function getValidFromUtc()
    {
        return $this->container['valid_from_utc'];
    }

    /**
     * Sets valid_from_utc
     *
     * @param \DateTime $valid_from_utc Valid from datetime in UTC timezone.
     *
     * @return self
     */
    public function setValidFromUtc($valid_from_utc)
    {

        if (is_null($valid_from_utc)) {
            throw new \InvalidArgumentException('non-nullable valid_from_utc cannot be null');
        }

        $this->container['valid_from_utc'] = $valid_from_utc;

        return $this;
    }

    /**
     * Gets expires_at_utc
     *
     * @return \DateTime|null
     */
    public function getExpiresAtUtc()
    {
        return $this->container['expires_at_utc'];
    }

    /**
     * Sets expires_at_utc
     *
     * @param \DateTime|null $expires_at_utc Datetime of expiry in UTC timezone.
     *
     * @return self
     */
    public function setExpiresAtUtc($expires_at_utc)
    {

        if (is_null($expires_at_utc)) {
            throw new \InvalidArgumentException('non-nullable expires_at_utc cannot be null');
        }

        $this->container['expires_at_utc'] = $expires_at_utc;

        return $this;
    }

    /**
     * Gets meta_data
     *
     * @return mixed|null
     */
    public function getMetaData()
    {
        return $this->container['meta_data'];
    }

    /**
     * Sets meta_data
     *
     * @param mixed|null $meta_data Metadata.
     *
     * @return self
     */
    public function setMetaData($meta_data)
    {

        if (is_null($meta_data)) {
            array_push($this->openAPINullablesSetToNull, 'meta_data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('meta_data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        $this->container['meta_data'] = $meta_data;

        return $this;
    }

    /**
     * Gets created_at_utc
     *
     * @return \DateTime
     */
    public function getCreatedAtUtc()
    {
        return $this->container['created_at_utc'];
    }

    /**
     * Sets created_at_utc
     *
     * @param \DateTime $created_at_utc Creation datetime of issue request in UTC timezone.
     *
     * @return self
     */
    public function setCreatedAtUtc($created_at_utc)
    {

        if (is_null($created_at_utc)) {
            throw new \InvalidArgumentException('non-nullable created_at_utc cannot be null');
        }

        $this->container['created_at_utc'] = $created_at_utc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


