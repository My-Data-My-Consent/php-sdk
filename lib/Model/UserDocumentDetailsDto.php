<?php
/**
 * UserDocumentDetailsDto
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  MyDataMyConsent
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDataMyConsent\Model;

use \ArrayAccess;
use \MyDataMyConsent\ObjectSerializer;

/**
 * UserDocumentDetailsDto Class Doc Comment
 *
 * @category Class
 * @package  MyDataMyConsent
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class UserDocumentDetailsDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserDocumentDetailsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'category_type' => '\MyDataMyConsent\Model\DocumentCategoryType',
        'type_id' => 'string',
        'type_name' => 'string',
        'full_name' => 'string',
        'identifier' => 'string',
        'account_id' => 'string',
        'issuer_id' => 'string',
        'issuer_name' => 'string',
        'storage_url' => 'string',
        'is_quick_access_enabled' => 'bool',
        'is_owner' => 'bool',
        'digital_signature_details' => '\MyDataMyConsent\Model\DigitalSignature[]',
        'owner_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'category_type' => null,
        'type_id' => 'uuid',
        'type_name' => null,
        'full_name' => null,
        'identifier' => null,
        'account_id' => 'uuid',
        'issuer_id' => 'uuid',
        'issuer_name' => null,
        'storage_url' => null,
        'is_quick_access_enabled' => null,
        'is_owner' => null,
        'digital_signature_details' => null,
        'owner_id' => 'uuid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'category_type' => 'categoryType',
        'type_id' => 'typeId',
        'type_name' => 'typeName',
        'full_name' => 'fullName',
        'identifier' => 'identifier',
        'account_id' => 'accountId',
        'issuer_id' => 'issuerId',
        'issuer_name' => 'issuerName',
        'storage_url' => 'storageUrl',
        'is_quick_access_enabled' => 'isQuickAccessEnabled',
        'is_owner' => 'isOwner',
        'digital_signature_details' => 'digitalSignatureDetails',
        'owner_id' => 'ownerId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'category_type' => 'setCategoryType',
        'type_id' => 'setTypeId',
        'type_name' => 'setTypeName',
        'full_name' => 'setFullName',
        'identifier' => 'setIdentifier',
        'account_id' => 'setAccountId',
        'issuer_id' => 'setIssuerId',
        'issuer_name' => 'setIssuerName',
        'storage_url' => 'setStorageUrl',
        'is_quick_access_enabled' => 'setIsQuickAccessEnabled',
        'is_owner' => 'setIsOwner',
        'digital_signature_details' => 'setDigitalSignatureDetails',
        'owner_id' => 'setOwnerId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'category_type' => 'getCategoryType',
        'type_id' => 'getTypeId',
        'type_name' => 'getTypeName',
        'full_name' => 'getFullName',
        'identifier' => 'getIdentifier',
        'account_id' => 'getAccountId',
        'issuer_id' => 'getIssuerId',
        'issuer_name' => 'getIssuerName',
        'storage_url' => 'getStorageUrl',
        'is_quick_access_enabled' => 'getIsQuickAccessEnabled',
        'is_owner' => 'getIsOwner',
        'digital_signature_details' => 'getDigitalSignatureDetails',
        'owner_id' => 'getOwnerId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['category_type'] = $data['category_type'] ?? null;
        $this->container['type_id'] = $data['type_id'] ?? null;
        $this->container['type_name'] = $data['type_name'] ?? null;
        $this->container['full_name'] = $data['full_name'] ?? null;
        $this->container['identifier'] = $data['identifier'] ?? null;
        $this->container['account_id'] = $data['account_id'] ?? null;
        $this->container['issuer_id'] = $data['issuer_id'] ?? null;
        $this->container['issuer_name'] = $data['issuer_name'] ?? null;
        $this->container['storage_url'] = $data['storage_url'] ?? null;
        $this->container['is_quick_access_enabled'] = $data['is_quick_access_enabled'] ?? null;
        $this->container['is_owner'] = $data['is_owner'] ?? null;
        $this->container['digital_signature_details'] = $data['digital_signature_details'] ?? null;
        $this->container['owner_id'] = $data['owner_id'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets category_type
     *
     * @return \MyDataMyConsent\Model\DocumentCategoryType|null
     */
    public function getCategoryType()
    {
        return $this->container['category_type'];
    }

    /**
     * Sets category_type
     *
     * @param \MyDataMyConsent\Model\DocumentCategoryType|null $category_type category_type
     *
     * @return self
     */
    public function setCategoryType($category_type)
    {
        $this->container['category_type'] = $category_type;

        return $this;
    }

    /**
     * Gets type_id
     *
     * @return string|null
     */
    public function getTypeId()
    {
        return $this->container['type_id'];
    }

    /**
     * Sets type_id
     *
     * @param string|null $type_id type_id
     *
     * @return self
     */
    public function setTypeId($type_id)
    {
        $this->container['type_id'] = $type_id;

        return $this;
    }

    /**
     * Gets type_name
     *
     * @return string|null
     */
    public function getTypeName()
    {
        return $this->container['type_name'];
    }

    /**
     * Sets type_name
     *
     * @param string|null $type_name type_name
     *
     * @return self
     */
    public function setTypeName($type_name)
    {
        $this->container['type_name'] = $type_name;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string|null
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string|null $full_name full_name
     *
     * @return self
     */
    public function setFullName($full_name)
    {
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets identifier
     *
     * @return string|null
     */
    public function getIdentifier()
    {
        return $this->container['identifier'];
    }

    /**
     * Sets identifier
     *
     * @param string|null $identifier identifier
     *
     * @return self
     */
    public function setIdentifier($identifier)
    {
        $this->container['identifier'] = $identifier;

        return $this;
    }

    /**
     * Gets account_id
     *
     * @return string|null
     */
    public function getAccountId()
    {
        return $this->container['account_id'];
    }

    /**
     * Sets account_id
     *
     * @param string|null $account_id account_id
     *
     * @return self
     */
    public function setAccountId($account_id)
    {
        $this->container['account_id'] = $account_id;

        return $this;
    }

    /**
     * Gets issuer_id
     *
     * @return string|null
     */
    public function getIssuerId()
    {
        return $this->container['issuer_id'];
    }

    /**
     * Sets issuer_id
     *
     * @param string|null $issuer_id issuer_id
     *
     * @return self
     */
    public function setIssuerId($issuer_id)
    {
        $this->container['issuer_id'] = $issuer_id;

        return $this;
    }

    /**
     * Gets issuer_name
     *
     * @return string|null
     */
    public function getIssuerName()
    {
        return $this->container['issuer_name'];
    }

    /**
     * Sets issuer_name
     *
     * @param string|null $issuer_name issuer_name
     *
     * @return self
     */
    public function setIssuerName($issuer_name)
    {
        $this->container['issuer_name'] = $issuer_name;

        return $this;
    }

    /**
     * Gets storage_url
     *
     * @return string|null
     */
    public function getStorageUrl()
    {
        return $this->container['storage_url'];
    }

    /**
     * Sets storage_url
     *
     * @param string|null $storage_url storage_url
     *
     * @return self
     */
    public function setStorageUrl($storage_url)
    {
        $this->container['storage_url'] = $storage_url;

        return $this;
    }

    /**
     * Gets is_quick_access_enabled
     *
     * @return bool|null
     */
    public function getIsQuickAccessEnabled()
    {
        return $this->container['is_quick_access_enabled'];
    }

    /**
     * Sets is_quick_access_enabled
     *
     * @param bool|null $is_quick_access_enabled is_quick_access_enabled
     *
     * @return self
     */
    public function setIsQuickAccessEnabled($is_quick_access_enabled)
    {
        $this->container['is_quick_access_enabled'] = $is_quick_access_enabled;

        return $this;
    }

    /**
     * Gets is_owner
     *
     * @return bool|null
     */
    public function getIsOwner()
    {
        return $this->container['is_owner'];
    }

    /**
     * Sets is_owner
     *
     * @param bool|null $is_owner is_owner
     *
     * @return self
     */
    public function setIsOwner($is_owner)
    {
        $this->container['is_owner'] = $is_owner;

        return $this;
    }

    /**
     * Gets digital_signature_details
     *
     * @return \MyDataMyConsent\Model\DigitalSignature[]|null
     */
    public function getDigitalSignatureDetails()
    {
        return $this->container['digital_signature_details'];
    }

    /**
     * Sets digital_signature_details
     *
     * @param \MyDataMyConsent\Model\DigitalSignature[]|null $digital_signature_details digital_signature_details
     *
     * @return self
     */
    public function setDigitalSignatureDetails($digital_signature_details)
    {
        $this->container['digital_signature_details'] = $digital_signature_details;

        return $this;
    }

    /**
     * Gets owner_id
     *
     * @return string|null
     */
    public function getOwnerId()
    {
        return $this->container['owner_id'];
    }

    /**
     * Sets owner_id
     *
     * @param string|null $owner_id owner_id
     *
     * @return self
     */
    public function setOwnerId($owner_id)
    {
        $this->container['owner_id'] = $owner_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


