<?php
/**
 * OrganizationKyoDocument
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  MyDataMyConsent
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDataMyConsent\Model;

use \ArrayAccess;
use \MyDataMyConsent\ObjectSerializer;

/**
 * OrganizationKyoDocument Class Doc Comment
 *
 * @category Class
 * @package  MyDataMyConsent
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class OrganizationKyoDocument implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OrganizationKyoDocument';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'organization_id' => 'string',
        'document_name' => 'string',
        'storage_url' => 'string',
        'uploaded_at_utc' => '\DateTime',
        'verified_by' => 'string',
        'verified_at_utc' => '\DateTime',
        'deleted_by' => 'string',
        'deleted_at_utc' => '\DateTime',
        'organization' => '\MyDataMyConsent\Model\Organization',
        'verified_by_user' => '\MyDataMyConsent\Model\ApplicationUser',
        'deleted_by_user' => '\MyDataMyConsent\Model\ApplicationUser',
        'rejection' => '\MyDataMyConsent\Model\Rejection'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'organization_id' => 'uuid',
        'document_name' => null,
        'storage_url' => null,
        'uploaded_at_utc' => 'date-time',
        'verified_by' => 'uuid',
        'verified_at_utc' => 'date-time',
        'deleted_by' => 'uuid',
        'deleted_at_utc' => 'date-time',
        'organization' => null,
        'verified_by_user' => null,
        'deleted_by_user' => null,
        'rejection' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'organization_id' => 'organizationId',
        'document_name' => 'documentName',
        'storage_url' => 'storageUrl',
        'uploaded_at_utc' => 'uploadedAtUtc',
        'verified_by' => 'verifiedBy',
        'verified_at_utc' => 'verifiedAtUtc',
        'deleted_by' => 'deletedBy',
        'deleted_at_utc' => 'deletedAtUtc',
        'organization' => 'organization',
        'verified_by_user' => 'verifiedByUser',
        'deleted_by_user' => 'deletedByUser',
        'rejection' => 'rejection'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'organization_id' => 'setOrganizationId',
        'document_name' => 'setDocumentName',
        'storage_url' => 'setStorageUrl',
        'uploaded_at_utc' => 'setUploadedAtUtc',
        'verified_by' => 'setVerifiedBy',
        'verified_at_utc' => 'setVerifiedAtUtc',
        'deleted_by' => 'setDeletedBy',
        'deleted_at_utc' => 'setDeletedAtUtc',
        'organization' => 'setOrganization',
        'verified_by_user' => 'setVerifiedByUser',
        'deleted_by_user' => 'setDeletedByUser',
        'rejection' => 'setRejection'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'organization_id' => 'getOrganizationId',
        'document_name' => 'getDocumentName',
        'storage_url' => 'getStorageUrl',
        'uploaded_at_utc' => 'getUploadedAtUtc',
        'verified_by' => 'getVerifiedBy',
        'verified_at_utc' => 'getVerifiedAtUtc',
        'deleted_by' => 'getDeletedBy',
        'deleted_at_utc' => 'getDeletedAtUtc',
        'organization' => 'getOrganization',
        'verified_by_user' => 'getVerifiedByUser',
        'deleted_by_user' => 'getDeletedByUser',
        'rejection' => 'getRejection'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['organization_id'] = $data['organization_id'] ?? null;
        $this->container['document_name'] = $data['document_name'] ?? null;
        $this->container['storage_url'] = $data['storage_url'] ?? null;
        $this->container['uploaded_at_utc'] = $data['uploaded_at_utc'] ?? null;
        $this->container['verified_by'] = $data['verified_by'] ?? null;
        $this->container['verified_at_utc'] = $data['verified_at_utc'] ?? null;
        $this->container['deleted_by'] = $data['deleted_by'] ?? null;
        $this->container['deleted_at_utc'] = $data['deleted_at_utc'] ?? null;
        $this->container['organization'] = $data['organization'] ?? null;
        $this->container['verified_by_user'] = $data['verified_by_user'] ?? null;
        $this->container['deleted_by_user'] = $data['deleted_by_user'] ?? null;
        $this->container['rejection'] = $data['rejection'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets organization_id
     *
     * @return string|null
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param string|null $organization_id organization_id
     *
     * @return self
     */
    public function setOrganizationId($organization_id)
    {
        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets document_name
     *
     * @return string|null
     */
    public function getDocumentName()
    {
        return $this->container['document_name'];
    }

    /**
     * Sets document_name
     *
     * @param string|null $document_name document_name
     *
     * @return self
     */
    public function setDocumentName($document_name)
    {
        $this->container['document_name'] = $document_name;

        return $this;
    }

    /**
     * Gets storage_url
     *
     * @return string|null
     */
    public function getStorageUrl()
    {
        return $this->container['storage_url'];
    }

    /**
     * Sets storage_url
     *
     * @param string|null $storage_url storage_url
     *
     * @return self
     */
    public function setStorageUrl($storage_url)
    {
        $this->container['storage_url'] = $storage_url;

        return $this;
    }

    /**
     * Gets uploaded_at_utc
     *
     * @return \DateTime|null
     */
    public function getUploadedAtUtc()
    {
        return $this->container['uploaded_at_utc'];
    }

    /**
     * Sets uploaded_at_utc
     *
     * @param \DateTime|null $uploaded_at_utc uploaded_at_utc
     *
     * @return self
     */
    public function setUploadedAtUtc($uploaded_at_utc)
    {
        $this->container['uploaded_at_utc'] = $uploaded_at_utc;

        return $this;
    }

    /**
     * Gets verified_by
     *
     * @return string|null
     */
    public function getVerifiedBy()
    {
        return $this->container['verified_by'];
    }

    /**
     * Sets verified_by
     *
     * @param string|null $verified_by verified_by
     *
     * @return self
     */
    public function setVerifiedBy($verified_by)
    {
        $this->container['verified_by'] = $verified_by;

        return $this;
    }

    /**
     * Gets verified_at_utc
     *
     * @return \DateTime|null
     */
    public function getVerifiedAtUtc()
    {
        return $this->container['verified_at_utc'];
    }

    /**
     * Sets verified_at_utc
     *
     * @param \DateTime|null $verified_at_utc verified_at_utc
     *
     * @return self
     */
    public function setVerifiedAtUtc($verified_at_utc)
    {
        $this->container['verified_at_utc'] = $verified_at_utc;

        return $this;
    }

    /**
     * Gets deleted_by
     *
     * @return string|null
     */
    public function getDeletedBy()
    {
        return $this->container['deleted_by'];
    }

    /**
     * Sets deleted_by
     *
     * @param string|null $deleted_by deleted_by
     *
     * @return self
     */
    public function setDeletedBy($deleted_by)
    {
        $this->container['deleted_by'] = $deleted_by;

        return $this;
    }

    /**
     * Gets deleted_at_utc
     *
     * @return \DateTime|null
     */
    public function getDeletedAtUtc()
    {
        return $this->container['deleted_at_utc'];
    }

    /**
     * Sets deleted_at_utc
     *
     * @param \DateTime|null $deleted_at_utc deleted_at_utc
     *
     * @return self
     */
    public function setDeletedAtUtc($deleted_at_utc)
    {
        $this->container['deleted_at_utc'] = $deleted_at_utc;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return \MyDataMyConsent\Model\Organization|null
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param \MyDataMyConsent\Model\Organization|null $organization organization
     *
     * @return self
     */
    public function setOrganization($organization)
    {
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets verified_by_user
     *
     * @return \MyDataMyConsent\Model\ApplicationUser|null
     */
    public function getVerifiedByUser()
    {
        return $this->container['verified_by_user'];
    }

    /**
     * Sets verified_by_user
     *
     * @param \MyDataMyConsent\Model\ApplicationUser|null $verified_by_user verified_by_user
     *
     * @return self
     */
    public function setVerifiedByUser($verified_by_user)
    {
        $this->container['verified_by_user'] = $verified_by_user;

        return $this;
    }

    /**
     * Gets deleted_by_user
     *
     * @return \MyDataMyConsent\Model\ApplicationUser|null
     */
    public function getDeletedByUser()
    {
        return $this->container['deleted_by_user'];
    }

    /**
     * Sets deleted_by_user
     *
     * @param \MyDataMyConsent\Model\ApplicationUser|null $deleted_by_user deleted_by_user
     *
     * @return self
     */
    public function setDeletedByUser($deleted_by_user)
    {
        $this->container['deleted_by_user'] = $deleted_by_user;

        return $this;
    }

    /**
     * Gets rejection
     *
     * @return \MyDataMyConsent\Model\Rejection|null
     */
    public function getRejection()
    {
        return $this->container['rejection'];
    }

    /**
     * Sets rejection
     *
     * @param \MyDataMyConsent\Model\Rejection|null $rejection rejection
     *
     * @return self
     */
    public function setRejection($rejection)
    {
        $this->container['rejection'] = $rejection;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


