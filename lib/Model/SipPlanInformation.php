<?php
/**
 * SipPlanInformation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDataMyConsent
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * My Data My Consent - Developer API
 *
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDataMyConsent\Model;

use \ArrayAccess;
use \MyDataMyConsent\ObjectSerializer;

/**
 * SipPlanInformation Class Doc Comment
 *
 * @category Class
 * @package  MyDataMyConsent
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SipPlanInformation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SipPlanInformation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amc' => 'string',
        'registrar' => 'string',
        'scheme' => 'string',
        'isin' => 'string',
        'folio_number' => 'string',
        'nav' => 'string',
        'dividend_type' => 'string',
        'creation_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amc' => null,
        'registrar' => null,
        'scheme' => null,
        'isin' => null,
        'folio_number' => null,
        'nav' => null,
        'dividend_type' => null,
        'creation_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'amc' => false,
		'registrar' => false,
		'scheme' => false,
		'isin' => false,
		'folio_number' => false,
		'nav' => false,
		'dividend_type' => false,
		'creation_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amc' => 'amc',
        'registrar' => 'registrar',
        'scheme' => 'scheme',
        'isin' => 'isin',
        'folio_number' => 'folio_number',
        'nav' => 'nav',
        'dividend_type' => 'dividend_type',
        'creation_date' => 'creation_date'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amc' => 'setAmc',
        'registrar' => 'setRegistrar',
        'scheme' => 'setScheme',
        'isin' => 'setIsin',
        'folio_number' => 'setFolioNumber',
        'nav' => 'setNav',
        'dividend_type' => 'setDividendType',
        'creation_date' => 'setCreationDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amc' => 'getAmc',
        'registrar' => 'getRegistrar',
        'scheme' => 'getScheme',
        'isin' => 'getIsin',
        'folio_number' => 'getFolioNumber',
        'nav' => 'getNav',
        'dividend_type' => 'getDividendType',
        'creation_date' => 'getCreationDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('amc', $data ?? [], null);
        $this->setIfExists('registrar', $data ?? [], null);
        $this->setIfExists('scheme', $data ?? [], null);
        $this->setIfExists('isin', $data ?? [], null);
        $this->setIfExists('folio_number', $data ?? [], null);
        $this->setIfExists('nav', $data ?? [], null);
        $this->setIfExists('dividend_type', $data ?? [], null);
        $this->setIfExists('creation_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['scheme'] === null) {
            $invalidProperties[] = "'scheme' can't be null";
        }
        if ($this->container['isin'] === null) {
            $invalidProperties[] = "'isin' can't be null";
        }
        if ($this->container['dividend_type'] === null) {
            $invalidProperties[] = "'dividend_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amc
     *
     * @return string|null
     */
    public function getAmc()
    {
        return $this->container['amc'];
    }

    /**
     * Sets amc
     *
     * @param string|null $amc amc
     *
     * @return self
     */
    public function setAmc($amc)
    {

        if (is_null($amc)) {
            throw new \InvalidArgumentException('non-nullable amc cannot be null');
        }

        $this->container['amc'] = $amc;

        return $this;
    }

    /**
     * Gets registrar
     *
     * @return string|null
     */
    public function getRegistrar()
    {
        return $this->container['registrar'];
    }

    /**
     * Sets registrar
     *
     * @param string|null $registrar registrar
     *
     * @return self
     */
    public function setRegistrar($registrar)
    {

        if (is_null($registrar)) {
            throw new \InvalidArgumentException('non-nullable registrar cannot be null');
        }

        $this->container['registrar'] = $registrar;

        return $this;
    }

    /**
     * Gets scheme
     *
     * @return string
     */
    public function getScheme()
    {
        return $this->container['scheme'];
    }

    /**
     * Sets scheme
     *
     * @param string $scheme scheme
     *
     * @return self
     */
    public function setScheme($scheme)
    {

        if (is_null($scheme)) {
            throw new \InvalidArgumentException('non-nullable scheme cannot be null');
        }

        $this->container['scheme'] = $scheme;

        return $this;
    }

    /**
     * Gets isin
     *
     * @return string
     */
    public function getIsin()
    {
        return $this->container['isin'];
    }

    /**
     * Sets isin
     *
     * @param string $isin isin
     *
     * @return self
     */
    public function setIsin($isin)
    {

        if (is_null($isin)) {
            throw new \InvalidArgumentException('non-nullable isin cannot be null');
        }

        $this->container['isin'] = $isin;

        return $this;
    }

    /**
     * Gets folio_number
     *
     * @return string|null
     */
    public function getFolioNumber()
    {
        return $this->container['folio_number'];
    }

    /**
     * Sets folio_number
     *
     * @param string|null $folio_number folio_number
     *
     * @return self
     */
    public function setFolioNumber($folio_number)
    {

        if (is_null($folio_number)) {
            throw new \InvalidArgumentException('non-nullable folio_number cannot be null');
        }

        $this->container['folio_number'] = $folio_number;

        return $this;
    }

    /**
     * Gets nav
     *
     * @return string|null
     */
    public function getNav()
    {
        return $this->container['nav'];
    }

    /**
     * Sets nav
     *
     * @param string|null $nav nav
     *
     * @return self
     */
    public function setNav($nav)
    {

        if (is_null($nav)) {
            throw new \InvalidArgumentException('non-nullable nav cannot be null');
        }

        $this->container['nav'] = $nav;

        return $this;
    }

    /**
     * Gets dividend_type
     *
     * @return string
     */
    public function getDividendType()
    {
        return $this->container['dividend_type'];
    }

    /**
     * Sets dividend_type
     *
     * @param string $dividend_type dividend_type
     *
     * @return self
     */
    public function setDividendType($dividend_type)
    {

        if (is_null($dividend_type)) {
            throw new \InvalidArgumentException('non-nullable dividend_type cannot be null');
        }

        $this->container['dividend_type'] = $dividend_type;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime|null
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime|null $creation_date creation_date
     *
     * @return self
     */
    public function setCreationDate($creation_date)
    {

        if (is_null($creation_date)) {
            throw new \InvalidArgumentException('non-nullable creation_date cannot be null');
        }

        $this->container['creation_date'] = $creation_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


