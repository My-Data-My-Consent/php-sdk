<?php
/**
 * PushUriRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDataMyConsent
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * My Data My Consent - Developer API
 *
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDataMyConsent\Model;

use \ArrayAccess;
use \MyDataMyConsent\ObjectSerializer;

/**
 * PushUriRequest Class Doc Comment
 *
 * @category Class
 * @package  MyDataMyConsent
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PushUriRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PushUriRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'uri_details' => '\MyDataMyConsent\Model\UriDetails',
        'ns2' => 'string',
        'ver' => 'string',
        'ts' => 'string',
        'txn' => 'string',
        'org_id' => 'string',
        'key_hash' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'uri_details' => null,
        'ns2' => null,
        'ver' => null,
        'ts' => null,
        'txn' => null,
        'org_id' => null,
        'key_hash' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'uri_details' => false,
		'ns2' => false,
		'ver' => false,
		'ts' => false,
		'txn' => false,
		'org_id' => false,
		'key_hash' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'uri_details' => 'uriDetails',
        'ns2' => 'ns2',
        'ver' => 'ver',
        'ts' => 'ts',
        'txn' => 'txn',
        'org_id' => 'orgId',
        'key_hash' => 'keyHash'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'uri_details' => 'setUriDetails',
        'ns2' => 'setNs2',
        'ver' => 'setVer',
        'ts' => 'setTs',
        'txn' => 'setTxn',
        'org_id' => 'setOrgId',
        'key_hash' => 'setKeyHash'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'uri_details' => 'getUriDetails',
        'ns2' => 'getNs2',
        'ver' => 'getVer',
        'ts' => 'getTs',
        'txn' => 'getTxn',
        'org_id' => 'getOrgId',
        'key_hash' => 'getKeyHash'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('uri_details', $data ?? [], null);
        $this->setIfExists('ns2', $data ?? [], null);
        $this->setIfExists('ver', $data ?? [], null);
        $this->setIfExists('ts', $data ?? [], null);
        $this->setIfExists('txn', $data ?? [], null);
        $this->setIfExists('org_id', $data ?? [], null);
        $this->setIfExists('key_hash', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['uri_details'] === null) {
            $invalidProperties[] = "'uri_details' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets uri_details
     *
     * @return \MyDataMyConsent\Model\UriDetails
     */
    public function getUriDetails()
    {
        return $this->container['uri_details'];
    }

    /**
     * Sets uri_details
     *
     * @param \MyDataMyConsent\Model\UriDetails $uri_details uri_details
     *
     * @return self
     */
    public function setUriDetails($uri_details)
    {

        if (is_null($uri_details)) {
            throw new \InvalidArgumentException('non-nullable uri_details cannot be null');
        }

        $this->container['uri_details'] = $uri_details;

        return $this;
    }

    /**
     * Gets ns2
     *
     * @return string|null
     */
    public function getNs2()
    {
        return $this->container['ns2'];
    }

    /**
     * Sets ns2
     *
     * @param string|null $ns2 ns2
     *
     * @return self
     */
    public function setNs2($ns2)
    {

        if (is_null($ns2)) {
            throw new \InvalidArgumentException('non-nullable ns2 cannot be null');
        }

        $this->container['ns2'] = $ns2;

        return $this;
    }

    /**
     * Gets ver
     *
     * @return string|null
     */
    public function getVer()
    {
        return $this->container['ver'];
    }

    /**
     * Sets ver
     *
     * @param string|null $ver ver
     *
     * @return self
     */
    public function setVer($ver)
    {

        if (is_null($ver)) {
            throw new \InvalidArgumentException('non-nullable ver cannot be null');
        }

        $this->container['ver'] = $ver;

        return $this;
    }

    /**
     * Gets ts
     *
     * @return string|null
     */
    public function getTs()
    {
        return $this->container['ts'];
    }

    /**
     * Sets ts
     *
     * @param string|null $ts ts
     *
     * @return self
     */
    public function setTs($ts)
    {

        if (is_null($ts)) {
            throw new \InvalidArgumentException('non-nullable ts cannot be null');
        }

        $this->container['ts'] = $ts;

        return $this;
    }

    /**
     * Gets txn
     *
     * @return string|null
     */
    public function getTxn()
    {
        return $this->container['txn'];
    }

    /**
     * Sets txn
     *
     * @param string|null $txn txn
     *
     * @return self
     */
    public function setTxn($txn)
    {

        if (is_null($txn)) {
            throw new \InvalidArgumentException('non-nullable txn cannot be null');
        }

        $this->container['txn'] = $txn;

        return $this;
    }

    /**
     * Gets org_id
     *
     * @return string|null
     */
    public function getOrgId()
    {
        return $this->container['org_id'];
    }

    /**
     * Sets org_id
     *
     * @param string|null $org_id org_id
     *
     * @return self
     */
    public function setOrgId($org_id)
    {

        if (is_null($org_id)) {
            throw new \InvalidArgumentException('non-nullable org_id cannot be null');
        }

        $this->container['org_id'] = $org_id;

        return $this;
    }

    /**
     * Gets key_hash
     *
     * @return string|null
     */
    public function getKeyHash()
    {
        return $this->container['key_hash'];
    }

    /**
     * Sets key_hash
     *
     * @param string|null $key_hash key_hash
     *
     * @return self
     */
    public function setKeyHash($key_hash)
    {

        if (is_null($key_hash)) {
            throw new \InvalidArgumentException('non-nullable key_hash cannot be null');
        }

        $this->container['key_hash'] = $key_hash;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


