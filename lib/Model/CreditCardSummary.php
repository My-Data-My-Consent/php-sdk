<?php
/**
 * CreditCardSummary
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDataMyConsent
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * My Data My Consent - Developer API
 *
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDataMyConsent\Model;

use \ArrayAccess;
use \MyDataMyConsent\ObjectSerializer;

/**
 * CreditCardSummary Class Doc Comment
 *
 * @category Class
 * @package  MyDataMyConsent
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreditCardSummary implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreditCardSummary';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'credit_card_id' => 'string',
        'current_due' => 'float',
        'last_statement_date' => '\DateTime',
        'due_date' => '\DateTime',
        'previous_due_amount' => 'float',
        'total_due_amount' => 'float',
        'min_due_amount' => 'float',
        'credit_limit' => 'float',
        'cash_limit' => 'float',
        'available_credit' => 'float',
        'loyalty_points' => 'string',
        'finance_charges' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'credit_card_id' => 'uuid',
        'current_due' => 'double',
        'last_statement_date' => 'date-time',
        'due_date' => 'date-time',
        'previous_due_amount' => 'double',
        'total_due_amount' => 'double',
        'min_due_amount' => 'double',
        'credit_limit' => 'double',
        'cash_limit' => 'double',
        'available_credit' => 'double',
        'loyalty_points' => null,
        'finance_charges' => 'double'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'credit_card_id' => false,
		'current_due' => false,
		'last_statement_date' => false,
		'due_date' => false,
		'previous_due_amount' => false,
		'total_due_amount' => false,
		'min_due_amount' => false,
		'credit_limit' => false,
		'cash_limit' => false,
		'available_credit' => false,
		'loyalty_points' => false,
		'finance_charges' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'credit_card_id' => 'creditCardId',
        'current_due' => 'currentDue',
        'last_statement_date' => 'lastStatementDate',
        'due_date' => 'dueDate',
        'previous_due_amount' => 'previousDueAmount',
        'total_due_amount' => 'totalDueAmount',
        'min_due_amount' => 'minDueAmount',
        'credit_limit' => 'creditLimit',
        'cash_limit' => 'cashLimit',
        'available_credit' => 'availableCredit',
        'loyalty_points' => 'loyaltyPoints',
        'finance_charges' => 'financeCharges'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'credit_card_id' => 'setCreditCardId',
        'current_due' => 'setCurrentDue',
        'last_statement_date' => 'setLastStatementDate',
        'due_date' => 'setDueDate',
        'previous_due_amount' => 'setPreviousDueAmount',
        'total_due_amount' => 'setTotalDueAmount',
        'min_due_amount' => 'setMinDueAmount',
        'credit_limit' => 'setCreditLimit',
        'cash_limit' => 'setCashLimit',
        'available_credit' => 'setAvailableCredit',
        'loyalty_points' => 'setLoyaltyPoints',
        'finance_charges' => 'setFinanceCharges'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'credit_card_id' => 'getCreditCardId',
        'current_due' => 'getCurrentDue',
        'last_statement_date' => 'getLastStatementDate',
        'due_date' => 'getDueDate',
        'previous_due_amount' => 'getPreviousDueAmount',
        'total_due_amount' => 'getTotalDueAmount',
        'min_due_amount' => 'getMinDueAmount',
        'credit_limit' => 'getCreditLimit',
        'cash_limit' => 'getCashLimit',
        'available_credit' => 'getAvailableCredit',
        'loyalty_points' => 'getLoyaltyPoints',
        'finance_charges' => 'getFinanceCharges'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('credit_card_id', $data ?? [], null);
        $this->setIfExists('current_due', $data ?? [], null);
        $this->setIfExists('last_statement_date', $data ?? [], null);
        $this->setIfExists('due_date', $data ?? [], null);
        $this->setIfExists('previous_due_amount', $data ?? [], null);
        $this->setIfExists('total_due_amount', $data ?? [], null);
        $this->setIfExists('min_due_amount', $data ?? [], null);
        $this->setIfExists('credit_limit', $data ?? [], null);
        $this->setIfExists('cash_limit', $data ?? [], null);
        $this->setIfExists('available_credit', $data ?? [], null);
        $this->setIfExists('loyalty_points', $data ?? [], null);
        $this->setIfExists('finance_charges', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['credit_card_id'] === null) {
            $invalidProperties[] = "'credit_card_id' can't be null";
        }
        if ($this->container['current_due'] === null) {
            $invalidProperties[] = "'current_due' can't be null";
        }
        if ($this->container['last_statement_date'] === null) {
            $invalidProperties[] = "'last_statement_date' can't be null";
        }
        if ($this->container['due_date'] === null) {
            $invalidProperties[] = "'due_date' can't be null";
        }
        if ($this->container['previous_due_amount'] === null) {
            $invalidProperties[] = "'previous_due_amount' can't be null";
        }
        if ($this->container['total_due_amount'] === null) {
            $invalidProperties[] = "'total_due_amount' can't be null";
        }
        if ($this->container['min_due_amount'] === null) {
            $invalidProperties[] = "'min_due_amount' can't be null";
        }
        if ($this->container['credit_limit'] === null) {
            $invalidProperties[] = "'credit_limit' can't be null";
        }
        if ($this->container['cash_limit'] === null) {
            $invalidProperties[] = "'cash_limit' can't be null";
        }
        if ($this->container['available_credit'] === null) {
            $invalidProperties[] = "'available_credit' can't be null";
        }
        if ($this->container['loyalty_points'] === null) {
            $invalidProperties[] = "'loyalty_points' can't be null";
        }
        if ($this->container['finance_charges'] === null) {
            $invalidProperties[] = "'finance_charges' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets credit_card_id
     *
     * @return string
     */
    public function getCreditCardId()
    {
        return $this->container['credit_card_id'];
    }

    /**
     * Sets credit_card_id
     *
     * @param string $credit_card_id credit_card_id
     *
     * @return self
     */
    public function setCreditCardId($credit_card_id)
    {

        if (is_null($credit_card_id)) {
            throw new \InvalidArgumentException('non-nullable credit_card_id cannot be null');
        }

        $this->container['credit_card_id'] = $credit_card_id;

        return $this;
    }

    /**
     * Gets current_due
     *
     * @return float
     */
    public function getCurrentDue()
    {
        return $this->container['current_due'];
    }

    /**
     * Sets current_due
     *
     * @param float $current_due current_due
     *
     * @return self
     */
    public function setCurrentDue($current_due)
    {

        if (is_null($current_due)) {
            throw new \InvalidArgumentException('non-nullable current_due cannot be null');
        }

        $this->container['current_due'] = $current_due;

        return $this;
    }

    /**
     * Gets last_statement_date
     *
     * @return \DateTime
     */
    public function getLastStatementDate()
    {
        return $this->container['last_statement_date'];
    }

    /**
     * Sets last_statement_date
     *
     * @param \DateTime $last_statement_date last_statement_date
     *
     * @return self
     */
    public function setLastStatementDate($last_statement_date)
    {

        if (is_null($last_statement_date)) {
            throw new \InvalidArgumentException('non-nullable last_statement_date cannot be null');
        }

        $this->container['last_statement_date'] = $last_statement_date;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date due_date
     *
     * @return self
     */
    public function setDueDate($due_date)
    {

        if (is_null($due_date)) {
            throw new \InvalidArgumentException('non-nullable due_date cannot be null');
        }

        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets previous_due_amount
     *
     * @return float
     */
    public function getPreviousDueAmount()
    {
        return $this->container['previous_due_amount'];
    }

    /**
     * Sets previous_due_amount
     *
     * @param float $previous_due_amount previous_due_amount
     *
     * @return self
     */
    public function setPreviousDueAmount($previous_due_amount)
    {

        if (is_null($previous_due_amount)) {
            throw new \InvalidArgumentException('non-nullable previous_due_amount cannot be null');
        }

        $this->container['previous_due_amount'] = $previous_due_amount;

        return $this;
    }

    /**
     * Gets total_due_amount
     *
     * @return float
     */
    public function getTotalDueAmount()
    {
        return $this->container['total_due_amount'];
    }

    /**
     * Sets total_due_amount
     *
     * @param float $total_due_amount total_due_amount
     *
     * @return self
     */
    public function setTotalDueAmount($total_due_amount)
    {

        if (is_null($total_due_amount)) {
            throw new \InvalidArgumentException('non-nullable total_due_amount cannot be null');
        }

        $this->container['total_due_amount'] = $total_due_amount;

        return $this;
    }

    /**
     * Gets min_due_amount
     *
     * @return float
     */
    public function getMinDueAmount()
    {
        return $this->container['min_due_amount'];
    }

    /**
     * Sets min_due_amount
     *
     * @param float $min_due_amount min_due_amount
     *
     * @return self
     */
    public function setMinDueAmount($min_due_amount)
    {

        if (is_null($min_due_amount)) {
            throw new \InvalidArgumentException('non-nullable min_due_amount cannot be null');
        }

        $this->container['min_due_amount'] = $min_due_amount;

        return $this;
    }

    /**
     * Gets credit_limit
     *
     * @return float
     */
    public function getCreditLimit()
    {
        return $this->container['credit_limit'];
    }

    /**
     * Sets credit_limit
     *
     * @param float $credit_limit credit_limit
     *
     * @return self
     */
    public function setCreditLimit($credit_limit)
    {

        if (is_null($credit_limit)) {
            throw new \InvalidArgumentException('non-nullable credit_limit cannot be null');
        }

        $this->container['credit_limit'] = $credit_limit;

        return $this;
    }

    /**
     * Gets cash_limit
     *
     * @return float
     */
    public function getCashLimit()
    {
        return $this->container['cash_limit'];
    }

    /**
     * Sets cash_limit
     *
     * @param float $cash_limit cash_limit
     *
     * @return self
     */
    public function setCashLimit($cash_limit)
    {

        if (is_null($cash_limit)) {
            throw new \InvalidArgumentException('non-nullable cash_limit cannot be null');
        }

        $this->container['cash_limit'] = $cash_limit;

        return $this;
    }

    /**
     * Gets available_credit
     *
     * @return float
     */
    public function getAvailableCredit()
    {
        return $this->container['available_credit'];
    }

    /**
     * Sets available_credit
     *
     * @param float $available_credit available_credit
     *
     * @return self
     */
    public function setAvailableCredit($available_credit)
    {

        if (is_null($available_credit)) {
            throw new \InvalidArgumentException('non-nullable available_credit cannot be null');
        }

        $this->container['available_credit'] = $available_credit;

        return $this;
    }

    /**
     * Gets loyalty_points
     *
     * @return string
     */
    public function getLoyaltyPoints()
    {
        return $this->container['loyalty_points'];
    }

    /**
     * Sets loyalty_points
     *
     * @param string $loyalty_points loyalty_points
     *
     * @return self
     */
    public function setLoyaltyPoints($loyalty_points)
    {

        if (is_null($loyalty_points)) {
            throw new \InvalidArgumentException('non-nullable loyalty_points cannot be null');
        }

        $this->container['loyalty_points'] = $loyalty_points;

        return $this;
    }

    /**
     * Gets finance_charges
     *
     * @return float
     */
    public function getFinanceCharges()
    {
        return $this->container['finance_charges'];
    }

    /**
     * Sets finance_charges
     *
     * @param float $finance_charges finance_charges
     *
     * @return self
     */
    public function setFinanceCharges($finance_charges)
    {

        if (is_null($finance_charges)) {
            throw new \InvalidArgumentException('non-nullable finance_charges cannot be null');
        }

        $this->container['finance_charges'] = $finance_charges;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


