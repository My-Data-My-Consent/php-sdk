<?php
/**
 * DocumentTypeDetailsDto
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  MyDataMyConsent
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDataMyConsent\Model;

use \ArrayAccess;
use \MyDataMyConsent\ObjectSerializer;

/**
 * DocumentTypeDetailsDto Class Doc Comment
 *
 * @category Class
 * @package  MyDataMyConsent
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DocumentTypeDetailsDto implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DocumentTypeDetailsDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'organization_id' => 'string',
        'category_type' => '\MyDataMyConsent\Model\DocumentCategoryType',
        'sub_category_type' => '\MyDataMyConsent\Model\DocumentSubCategoryType',
        'document_type_category_id' => 'string',
        'name' => 'string',
        'slug' => 'string',
        'description' => 'string',
        'logo_url' => 'string',
        'country_iso2' => 'string',
        'country_id' => 'string',
        'search_service_id' => 'string',
        'repository_service_id' => 'string',
        'supported_entity_type' => '\MyDataMyConsent\Model\SupportedEntityType',
        'added_by' => 'string',
        'payable_amount' => 'double',
        'approved_at_utc' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'organization_id' => 'uuid',
        'category_type' => null,
        'sub_category_type' => null,
        'document_type_category_id' => 'uuid',
        'name' => null,
        'slug' => null,
        'description' => null,
        'logo_url' => null,
        'country_iso2' => null,
        'country_id' => 'uuid',
        'search_service_id' => 'uuid',
        'repository_service_id' => 'uuid',
        'supported_entity_type' => null,
        'added_by' => null,
        'payable_amount' => 'double',
        'approved_at_utc' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'organization_id' => 'organizationId',
        'category_type' => 'categoryType',
        'sub_category_type' => 'subCategoryType',
        'document_type_category_id' => 'documentTypeCategoryId',
        'name' => 'name',
        'slug' => 'slug',
        'description' => 'description',
        'logo_url' => 'logoUrl',
        'country_iso2' => 'countryIso2',
        'country_id' => 'countryId',
        'search_service_id' => 'searchServiceId',
        'repository_service_id' => 'repositoryServiceId',
        'supported_entity_type' => 'supportedEntityType',
        'added_by' => 'addedBy',
        'payable_amount' => 'payableAmount',
        'approved_at_utc' => 'approvedAtUtc'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'organization_id' => 'setOrganizationId',
        'category_type' => 'setCategoryType',
        'sub_category_type' => 'setSubCategoryType',
        'document_type_category_id' => 'setDocumentTypeCategoryId',
        'name' => 'setName',
        'slug' => 'setSlug',
        'description' => 'setDescription',
        'logo_url' => 'setLogoUrl',
        'country_iso2' => 'setCountryIso2',
        'country_id' => 'setCountryId',
        'search_service_id' => 'setSearchServiceId',
        'repository_service_id' => 'setRepositoryServiceId',
        'supported_entity_type' => 'setSupportedEntityType',
        'added_by' => 'setAddedBy',
        'payable_amount' => 'setPayableAmount',
        'approved_at_utc' => 'setApprovedAtUtc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'organization_id' => 'getOrganizationId',
        'category_type' => 'getCategoryType',
        'sub_category_type' => 'getSubCategoryType',
        'document_type_category_id' => 'getDocumentTypeCategoryId',
        'name' => 'getName',
        'slug' => 'getSlug',
        'description' => 'getDescription',
        'logo_url' => 'getLogoUrl',
        'country_iso2' => 'getCountryIso2',
        'country_id' => 'getCountryId',
        'search_service_id' => 'getSearchServiceId',
        'repository_service_id' => 'getRepositoryServiceId',
        'supported_entity_type' => 'getSupportedEntityType',
        'added_by' => 'getAddedBy',
        'payable_amount' => 'getPayableAmount',
        'approved_at_utc' => 'getApprovedAtUtc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['organization_id'] = $data['organization_id'] ?? null;
        $this->container['category_type'] = $data['category_type'] ?? null;
        $this->container['sub_category_type'] = $data['sub_category_type'] ?? null;
        $this->container['document_type_category_id'] = $data['document_type_category_id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['slug'] = $data['slug'] ?? null;
        $this->container['description'] = $data['description'] ?? null;
        $this->container['logo_url'] = $data['logo_url'] ?? null;
        $this->container['country_iso2'] = $data['country_iso2'] ?? null;
        $this->container['country_id'] = $data['country_id'] ?? null;
        $this->container['search_service_id'] = $data['search_service_id'] ?? null;
        $this->container['repository_service_id'] = $data['repository_service_id'] ?? null;
        $this->container['supported_entity_type'] = $data['supported_entity_type'] ?? null;
        $this->container['added_by'] = $data['added_by'] ?? null;
        $this->container['payable_amount'] = $data['payable_amount'] ?? null;
        $this->container['approved_at_utc'] = $data['approved_at_utc'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['organization_id'] === null) {
            $invalidProperties[] = "'organization_id' can't be null";
        }
        if ($this->container['category_type'] === null) {
            $invalidProperties[] = "'category_type' can't be null";
        }
        if ($this->container['sub_category_type'] === null) {
            $invalidProperties[] = "'sub_category_type' can't be null";
        }
        if ($this->container['document_type_category_id'] === null) {
            $invalidProperties[] = "'document_type_category_id' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['slug'] === null) {
            $invalidProperties[] = "'slug' can't be null";
        }
        if ($this->container['logo_url'] === null) {
            $invalidProperties[] = "'logo_url' can't be null";
        }
        if ($this->container['country_iso2'] === null) {
            $invalidProperties[] = "'country_iso2' can't be null";
        }
        if ($this->container['country_id'] === null) {
            $invalidProperties[] = "'country_id' can't be null";
        }
        if ($this->container['supported_entity_type'] === null) {
            $invalidProperties[] = "'supported_entity_type' can't be null";
        }
        if ($this->container['added_by'] === null) {
            $invalidProperties[] = "'added_by' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets organization_id
     *
     * @return string
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param string $organization_id organization_id
     *
     * @return self
     */
    public function setOrganizationId($organization_id)
    {
        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets category_type
     *
     * @return \MyDataMyConsent\Model\DocumentCategoryType
     */
    public function getCategoryType()
    {
        return $this->container['category_type'];
    }

    /**
     * Sets category_type
     *
     * @param \MyDataMyConsent\Model\DocumentCategoryType $category_type category_type
     *
     * @return self
     */
    public function setCategoryType($category_type)
    {
        $this->container['category_type'] = $category_type;

        return $this;
    }

    /**
     * Gets sub_category_type
     *
     * @return \MyDataMyConsent\Model\DocumentSubCategoryType
     */
    public function getSubCategoryType()
    {
        return $this->container['sub_category_type'];
    }

    /**
     * Sets sub_category_type
     *
     * @param \MyDataMyConsent\Model\DocumentSubCategoryType $sub_category_type sub_category_type
     *
     * @return self
     */
    public function setSubCategoryType($sub_category_type)
    {
        $this->container['sub_category_type'] = $sub_category_type;

        return $this;
    }

    /**
     * Gets document_type_category_id
     *
     * @return string
     */
    public function getDocumentTypeCategoryId()
    {
        return $this->container['document_type_category_id'];
    }

    /**
     * Sets document_type_category_id
     *
     * @param string $document_type_category_id document_type_category_id
     *
     * @return self
     */
    public function setDocumentTypeCategoryId($document_type_category_id)
    {
        $this->container['document_type_category_id'] = $document_type_category_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string $slug slug
     *
     * @return self
     */
    public function setSlug($slug)
    {
        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets logo_url
     *
     * @return string
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string $logo_url logo_url
     *
     * @return self
     */
    public function setLogoUrl($logo_url)
    {
        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets country_iso2
     *
     * @return string
     */
    public function getCountryIso2()
    {
        return $this->container['country_iso2'];
    }

    /**
     * Sets country_iso2
     *
     * @param string $country_iso2 country_iso2
     *
     * @return self
     */
    public function setCountryIso2($country_iso2)
    {
        $this->container['country_iso2'] = $country_iso2;

        return $this;
    }

    /**
     * Gets country_id
     *
     * @return string
     */
    public function getCountryId()
    {
        return $this->container['country_id'];
    }

    /**
     * Sets country_id
     *
     * @param string $country_id country_id
     *
     * @return self
     */
    public function setCountryId($country_id)
    {
        $this->container['country_id'] = $country_id;

        return $this;
    }

    /**
     * Gets search_service_id
     *
     * @return string|null
     */
    public function getSearchServiceId()
    {
        return $this->container['search_service_id'];
    }

    /**
     * Sets search_service_id
     *
     * @param string|null $search_service_id search_service_id
     *
     * @return self
     */
    public function setSearchServiceId($search_service_id)
    {
        $this->container['search_service_id'] = $search_service_id;

        return $this;
    }

    /**
     * Gets repository_service_id
     *
     * @return string|null
     */
    public function getRepositoryServiceId()
    {
        return $this->container['repository_service_id'];
    }

    /**
     * Sets repository_service_id
     *
     * @param string|null $repository_service_id repository_service_id
     *
     * @return self
     */
    public function setRepositoryServiceId($repository_service_id)
    {
        $this->container['repository_service_id'] = $repository_service_id;

        return $this;
    }

    /**
     * Gets supported_entity_type
     *
     * @return \MyDataMyConsent\Model\SupportedEntityType
     */
    public function getSupportedEntityType()
    {
        return $this->container['supported_entity_type'];
    }

    /**
     * Sets supported_entity_type
     *
     * @param \MyDataMyConsent\Model\SupportedEntityType $supported_entity_type supported_entity_type
     *
     * @return self
     */
    public function setSupportedEntityType($supported_entity_type)
    {
        $this->container['supported_entity_type'] = $supported_entity_type;

        return $this;
    }

    /**
     * Gets added_by
     *
     * @return string
     */
    public function getAddedBy()
    {
        return $this->container['added_by'];
    }

    /**
     * Sets added_by
     *
     * @param string $added_by added_by
     *
     * @return self
     */
    public function setAddedBy($added_by)
    {
        $this->container['added_by'] = $added_by;

        return $this;
    }

    /**
     * Gets payable_amount
     *
     * @return double|null
     */
    public function getPayableAmount()
    {
        return $this->container['payable_amount'];
    }

    /**
     * Sets payable_amount
     *
     * @param double|null $payable_amount payable_amount
     *
     * @return self
     */
    public function setPayableAmount($payable_amount)
    {
        $this->container['payable_amount'] = $payable_amount;

        return $this;
    }

    /**
     * Gets approved_at_utc
     *
     * @return \DateTime|null
     */
    public function getApprovedAtUtc()
    {
        return $this->container['approved_at_utc'];
    }

    /**
     * Sets approved_at_utc
     *
     * @param \DateTime|null $approved_at_utc approved_at_utc
     *
     * @return self
     */
    public function setApprovedAtUtc($approved_at_utc)
    {
        $this->container['approved_at_utc'] = $approved_at_utc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


