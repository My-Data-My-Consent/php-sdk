<?php
/**
 * FinancialAccount
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDataMyConsent
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.0.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDataMyConsent\Model;

use \ArrayAccess;
use \MyDataMyConsent\ObjectSerializer;

/**
 * FinancialAccount Class Doc Comment
 *
 * @category Class
 * @package  MyDataMyConsent
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class FinancialAccount implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FinancialAccount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'issuer' => 'string',
        'logo_url' => 'string',
        'category_id' => 'string',
        'category_name' => 'string',
        'account_name' => 'string',
        'account_logo_url' => 'string',
        'balance' => 'string',
        'balance_type' => 'string',
        'is_shared' => 'bool',
        'shared_with' => '\MyDataMyConsent\Model\SharedWith[]',
        'is_received' => 'bool',
        'expires_at_utc' => '\DateTime',
        'activities' => '\MyDataMyConsent\Model\Activity[]',
        'approved_consent_requests' => '\MyDataMyConsent\Model\ApprovedConsentRequest[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'uuid',
        'issuer' => null,
        'logo_url' => null,
        'category_id' => null,
        'category_name' => null,
        'account_name' => null,
        'account_logo_url' => null,
        'balance' => null,
        'balance_type' => null,
        'is_shared' => null,
        'shared_with' => null,
        'is_received' => null,
        'expires_at_utc' => 'date-time',
        'activities' => null,
        'approved_consent_requests' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'issuer' => 'issuer',
        'logo_url' => 'logoUrl',
        'category_id' => 'categoryId',
        'category_name' => 'categoryName',
        'account_name' => 'accountName',
        'account_logo_url' => 'accountLogoUrl',
        'balance' => 'balance',
        'balance_type' => 'balanceType',
        'is_shared' => 'isShared',
        'shared_with' => 'sharedWith',
        'is_received' => 'isReceived',
        'expires_at_utc' => 'expiresAtUtc',
        'activities' => 'activities',
        'approved_consent_requests' => 'approvedConsentRequests'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'issuer' => 'setIssuer',
        'logo_url' => 'setLogoUrl',
        'category_id' => 'setCategoryId',
        'category_name' => 'setCategoryName',
        'account_name' => 'setAccountName',
        'account_logo_url' => 'setAccountLogoUrl',
        'balance' => 'setBalance',
        'balance_type' => 'setBalanceType',
        'is_shared' => 'setIsShared',
        'shared_with' => 'setSharedWith',
        'is_received' => 'setIsReceived',
        'expires_at_utc' => 'setExpiresAtUtc',
        'activities' => 'setActivities',
        'approved_consent_requests' => 'setApprovedConsentRequests'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'issuer' => 'getIssuer',
        'logo_url' => 'getLogoUrl',
        'category_id' => 'getCategoryId',
        'category_name' => 'getCategoryName',
        'account_name' => 'getAccountName',
        'account_logo_url' => 'getAccountLogoUrl',
        'balance' => 'getBalance',
        'balance_type' => 'getBalanceType',
        'is_shared' => 'getIsShared',
        'shared_with' => 'getSharedWith',
        'is_received' => 'getIsReceived',
        'expires_at_utc' => 'getExpiresAtUtc',
        'activities' => 'getActivities',
        'approved_consent_requests' => 'getApprovedConsentRequests'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['issuer'] = $data['issuer'] ?? null;
        $this->container['logo_url'] = $data['logo_url'] ?? null;
        $this->container['category_id'] = $data['category_id'] ?? null;
        $this->container['category_name'] = $data['category_name'] ?? null;
        $this->container['account_name'] = $data['account_name'] ?? null;
        $this->container['account_logo_url'] = $data['account_logo_url'] ?? null;
        $this->container['balance'] = $data['balance'] ?? null;
        $this->container['balance_type'] = $data['balance_type'] ?? null;
        $this->container['is_shared'] = $data['is_shared'] ?? null;
        $this->container['shared_with'] = $data['shared_with'] ?? null;
        $this->container['is_received'] = $data['is_received'] ?? null;
        $this->container['expires_at_utc'] = $data['expires_at_utc'] ?? null;
        $this->container['activities'] = $data['activities'] ?? null;
        $this->container['approved_consent_requests'] = $data['approved_consent_requests'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets issuer
     *
     * @return string|null
     */
    public function getIssuer()
    {
        return $this->container['issuer'];
    }

    /**
     * Sets issuer
     *
     * @param string|null $issuer issuer
     *
     * @return self
     */
    public function setIssuer($issuer)
    {
        $this->container['issuer'] = $issuer;

        return $this;
    }

    /**
     * Gets logo_url
     *
     * @return string|null
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string|null $logo_url logo_url
     *
     * @return self
     */
    public function setLogoUrl($logo_url)
    {
        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets category_id
     *
     * @return string|null
     */
    public function getCategoryId()
    {
        return $this->container['category_id'];
    }

    /**
     * Sets category_id
     *
     * @param string|null $category_id category_id
     *
     * @return self
     */
    public function setCategoryId($category_id)
    {
        $this->container['category_id'] = $category_id;

        return $this;
    }

    /**
     * Gets category_name
     *
     * @return string|null
     */
    public function getCategoryName()
    {
        return $this->container['category_name'];
    }

    /**
     * Sets category_name
     *
     * @param string|null $category_name category_name
     *
     * @return self
     */
    public function setCategoryName($category_name)
    {
        $this->container['category_name'] = $category_name;

        return $this;
    }

    /**
     * Gets account_name
     *
     * @return string|null
     */
    public function getAccountName()
    {
        return $this->container['account_name'];
    }

    /**
     * Sets account_name
     *
     * @param string|null $account_name account_name
     *
     * @return self
     */
    public function setAccountName($account_name)
    {
        $this->container['account_name'] = $account_name;

        return $this;
    }

    /**
     * Gets account_logo_url
     *
     * @return string|null
     */
    public function getAccountLogoUrl()
    {
        return $this->container['account_logo_url'];
    }

    /**
     * Sets account_logo_url
     *
     * @param string|null $account_logo_url account_logo_url
     *
     * @return self
     */
    public function setAccountLogoUrl($account_logo_url)
    {
        $this->container['account_logo_url'] = $account_logo_url;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return string|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param string|null $balance balance
     *
     * @return self
     */
    public function setBalance($balance)
    {
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets balance_type
     *
     * @return string|null
     */
    public function getBalanceType()
    {
        return $this->container['balance_type'];
    }

    /**
     * Sets balance_type
     *
     * @param string|null $balance_type balance_type
     *
     * @return self
     */
    public function setBalanceType($balance_type)
    {
        $this->container['balance_type'] = $balance_type;

        return $this;
    }

    /**
     * Gets is_shared
     *
     * @return bool|null
     */
    public function getIsShared()
    {
        return $this->container['is_shared'];
    }

    /**
     * Sets is_shared
     *
     * @param bool|null $is_shared is_shared
     *
     * @return self
     */
    public function setIsShared($is_shared)
    {
        $this->container['is_shared'] = $is_shared;

        return $this;
    }

    /**
     * Gets shared_with
     *
     * @return \MyDataMyConsent\Model\SharedWith[]|null
     */
    public function getSharedWith()
    {
        return $this->container['shared_with'];
    }

    /**
     * Sets shared_with
     *
     * @param \MyDataMyConsent\Model\SharedWith[]|null $shared_with shared_with
     *
     * @return self
     */
    public function setSharedWith($shared_with)
    {
        $this->container['shared_with'] = $shared_with;

        return $this;
    }

    /**
     * Gets is_received
     *
     * @return bool|null
     */
    public function getIsReceived()
    {
        return $this->container['is_received'];
    }

    /**
     * Sets is_received
     *
     * @param bool|null $is_received is_received
     *
     * @return self
     */
    public function setIsReceived($is_received)
    {
        $this->container['is_received'] = $is_received;

        return $this;
    }

    /**
     * Gets expires_at_utc
     *
     * @return \DateTime|null
     */
    public function getExpiresAtUtc()
    {
        return $this->container['expires_at_utc'];
    }

    /**
     * Sets expires_at_utc
     *
     * @param \DateTime|null $expires_at_utc expires_at_utc
     *
     * @return self
     */
    public function setExpiresAtUtc($expires_at_utc)
    {
        $this->container['expires_at_utc'] = $expires_at_utc;

        return $this;
    }

    /**
     * Gets activities
     *
     * @return \MyDataMyConsent\Model\Activity[]|null
     */
    public function getActivities()
    {
        return $this->container['activities'];
    }

    /**
     * Sets activities
     *
     * @param \MyDataMyConsent\Model\Activity[]|null $activities activities
     *
     * @return self
     */
    public function setActivities($activities)
    {
        $this->container['activities'] = $activities;

        return $this;
    }

    /**
     * Gets approved_consent_requests
     *
     * @return \MyDataMyConsent\Model\ApprovedConsentRequest[]|null
     */
    public function getApprovedConsentRequests()
    {
        return $this->container['approved_consent_requests'];
    }

    /**
     * Sets approved_consent_requests
     *
     * @param \MyDataMyConsent\Model\ApprovedConsentRequest[]|null $approved_consent_requests approved_consent_requests
     *
     * @return self
     */
    public function setApprovedConsentRequests($approved_consent_requests)
    {
        $this->container['approved_consent_requests'] = $approved_consent_requests;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


