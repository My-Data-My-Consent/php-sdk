<?php
/**
 * DocumentType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDataMyConsent
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * My Data My Consent - Developer API
 *
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDataMyConsent\Model;

use \ArrayAccess;
use \MyDataMyConsent\ObjectSerializer;

/**
 * DocumentType Class Doc Comment
 *
 * @category Class
 * @description DocumentType : Issuable Document Type details.
 * @package  MyDataMyConsent
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DocumentType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DocumentType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'category_type' => '\MyDataMyConsent\Model\DocumentCategoryType',
        'sub_category_type' => '\MyDataMyConsent\Model\DocumentSubCategoryType',
        'name' => 'string',
        'slug' => 'string',
        'description' => 'string',
        'logo_url' => 'string',
        'search_service_name' => 'string',
        'repository_service_name' => 'string',
        'supported_entity_type' => 'SupportedEntityType',
        'added_by' => 'string',
        'payable_amount' => 'float',
        'payable_amount_currency' => 'string',
        'approved_at_utc' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'category_type' => null,
        'sub_category_type' => null,
        'name' => null,
        'slug' => null,
        'description' => null,
        'logo_url' => null,
        'search_service_name' => null,
        'repository_service_name' => null,
        'supported_entity_type' => null,
        'added_by' => null,
        'payable_amount' => 'decimal',
        'payable_amount_currency' => null,
        'approved_at_utc' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
		'category_type' => false,
		'sub_category_type' => false,
		'name' => false,
		'slug' => false,
		'description' => false,
		'logo_url' => false,
		'search_service_name' => false,
		'repository_service_name' => false,
		'supported_entity_type' => false,
		'added_by' => false,
		'payable_amount' => false,
		'payable_amount_currency' => false,
		'approved_at_utc' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'category_type' => 'categoryType',
        'sub_category_type' => 'subCategoryType',
        'name' => 'name',
        'slug' => 'slug',
        'description' => 'description',
        'logo_url' => 'logoUrl',
        'search_service_name' => 'searchServiceName',
        'repository_service_name' => 'repositoryServiceName',
        'supported_entity_type' => 'supportedEntityType',
        'added_by' => 'addedBy',
        'payable_amount' => 'payableAmount',
        'payable_amount_currency' => 'payableAmountCurrency',
        'approved_at_utc' => 'approvedAtUtc'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'category_type' => 'setCategoryType',
        'sub_category_type' => 'setSubCategoryType',
        'name' => 'setName',
        'slug' => 'setSlug',
        'description' => 'setDescription',
        'logo_url' => 'setLogoUrl',
        'search_service_name' => 'setSearchServiceName',
        'repository_service_name' => 'setRepositoryServiceName',
        'supported_entity_type' => 'setSupportedEntityType',
        'added_by' => 'setAddedBy',
        'payable_amount' => 'setPayableAmount',
        'payable_amount_currency' => 'setPayableAmountCurrency',
        'approved_at_utc' => 'setApprovedAtUtc'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'category_type' => 'getCategoryType',
        'sub_category_type' => 'getSubCategoryType',
        'name' => 'getName',
        'slug' => 'getSlug',
        'description' => 'getDescription',
        'logo_url' => 'getLogoUrl',
        'search_service_name' => 'getSearchServiceName',
        'repository_service_name' => 'getRepositoryServiceName',
        'supported_entity_type' => 'getSupportedEntityType',
        'added_by' => 'getAddedBy',
        'payable_amount' => 'getPayableAmount',
        'payable_amount_currency' => 'getPayableAmountCurrency',
        'approved_at_utc' => 'getApprovedAtUtc'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('category_type', $data ?? [], null);
        $this->setIfExists('sub_category_type', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('slug', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('logo_url', $data ?? [], null);
        $this->setIfExists('search_service_name', $data ?? [], null);
        $this->setIfExists('repository_service_name', $data ?? [], null);
        $this->setIfExists('supported_entity_type', $data ?? [], null);
        $this->setIfExists('added_by', $data ?? [], null);
        $this->setIfExists('payable_amount', $data ?? [], null);
        $this->setIfExists('payable_amount_currency', $data ?? [], null);
        $this->setIfExists('approved_at_utc', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if ($this->container['category_type'] === null) {
            $invalidProperties[] = "'category_type' can't be null";
        }
        if ($this->container['sub_category_type'] === null) {
            $invalidProperties[] = "'sub_category_type' can't be null";
        }
        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['slug'] === null) {
            $invalidProperties[] = "'slug' can't be null";
        }
        if ($this->container['logo_url'] === null) {
            $invalidProperties[] = "'logo_url' can't be null";
        }
        if ($this->container['supported_entity_type'] === null) {
            $invalidProperties[] = "'supported_entity_type' can't be null";
        }
        if ($this->container['added_by'] === null) {
            $invalidProperties[] = "'added_by' can't be null";
        }
        if ($this->container['payable_amount'] === null) {
            $invalidProperties[] = "'payable_amount' can't be null";
        }
        if ($this->container['payable_amount_currency'] === null) {
            $invalidProperties[] = "'payable_amount_currency' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Document Type Identifier.
     *
     * @return self
     */
    public function setId($id)
    {

        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets category_type
     *
     * @return \MyDataMyConsent\Model\DocumentCategoryType
     */
    public function getCategoryType()
    {
        return $this->container['category_type'];
    }

    /**
     * Sets category_type
     *
     * @param \MyDataMyConsent\Model\DocumentCategoryType $category_type category_type
     *
     * @return self
     */
    public function setCategoryType($category_type)
    {

        if (is_null($category_type)) {
            throw new \InvalidArgumentException('non-nullable category_type cannot be null');
        }

        $this->container['category_type'] = $category_type;

        return $this;
    }

    /**
     * Gets sub_category_type
     *
     * @return \MyDataMyConsent\Model\DocumentSubCategoryType
     */
    public function getSubCategoryType()
    {
        return $this->container['sub_category_type'];
    }

    /**
     * Sets sub_category_type
     *
     * @param \MyDataMyConsent\Model\DocumentSubCategoryType $sub_category_type sub_category_type
     *
     * @return self
     */
    public function setSubCategoryType($sub_category_type)
    {

        if (is_null($sub_category_type)) {
            throw new \InvalidArgumentException('non-nullable sub_category_type cannot be null');
        }

        $this->container['sub_category_type'] = $sub_category_type;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Document Type Name. eg: Driving License.
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets slug
     *
     * @return string
     */
    public function getSlug()
    {
        return $this->container['slug'];
    }

    /**
     * Sets slug
     *
     * @param string $slug Document Type Unique Slug. eg: \\\"in.gov.gj.transport.dl\\\".
     *
     * @return self
     */
    public function setSlug($slug)
    {

        if (is_null($slug)) {
            throw new \InvalidArgumentException('non-nullable slug cannot be null');
        }

        $this->container['slug'] = $slug;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Document Type description. eg: Gujarat State Driving License.
     *
     * @return self
     */
    public function setDescription($description)
    {

        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }

        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets logo_url
     *
     * @return string
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string $logo_url Logo URL of document type.
     *
     * @return self
     */
    public function setLogoUrl($logo_url)
    {

        if (is_null($logo_url)) {
            throw new \InvalidArgumentException('non-nullable logo_url cannot be null');
        }

        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets search_service_name
     *
     * @return string|null
     */
    public function getSearchServiceName()
    {
        return $this->container['search_service_name'];
    }

    /**
     * Sets search_service_name
     *
     * @param string|null $search_service_name Document search repository service name.
     *
     * @return self
     */
    public function setSearchServiceName($search_service_name)
    {

        if (is_null($search_service_name)) {
            throw new \InvalidArgumentException('non-nullable search_service_name cannot be null');
        }

        $this->container['search_service_name'] = $search_service_name;

        return $this;
    }

    /**
     * Gets repository_service_name
     *
     * @return string|null
     */
    public function getRepositoryServiceName()
    {
        return $this->container['repository_service_name'];
    }

    /**
     * Sets repository_service_name
     *
     * @param string|null $repository_service_name Document repository service name.
     *
     * @return self
     */
    public function setRepositoryServiceName($repository_service_name)
    {

        if (is_null($repository_service_name)) {
            throw new \InvalidArgumentException('non-nullable repository_service_name cannot be null');
        }

        $this->container['repository_service_name'] = $repository_service_name;

        return $this;
    }

    /**
     * Gets supported_entity_type
     *
     * @return SupportedEntityType
     */
    public function getSupportedEntityType()
    {
        return $this->container['supported_entity_type'];
    }

    /**
     * Sets supported_entity_type
     *
     * @param SupportedEntityType $supported_entity_type supported_entity_type
     *
     * @return self
     */
    public function setSupportedEntityType($supported_entity_type)
    {

        if (is_null($supported_entity_type)) {
            throw new \InvalidArgumentException('non-nullable supported_entity_type cannot be null');
        }

        $this->container['supported_entity_type'] = $supported_entity_type;

        return $this;
    }

    /**
     * Gets added_by
     *
     * @return string
     */
    public function getAddedBy()
    {
        return $this->container['added_by'];
    }

    /**
     * Sets added_by
     *
     * @param string $added_by Name of the document type creator.
     *
     * @return self
     */
    public function setAddedBy($added_by)
    {

        if (is_null($added_by)) {
            throw new \InvalidArgumentException('non-nullable added_by cannot be null');
        }

        $this->container['added_by'] = $added_by;

        return $this;
    }

    /**
     * Gets payable_amount
     *
     * @return float
     */
    public function getPayableAmount()
    {
        return $this->container['payable_amount'];
    }

    /**
     * Sets payable_amount
     *
     * @param float $payable_amount Payable amount if document is chargeable. eg: 10.25.
     *
     * @return self
     */
    public function setPayableAmount($payable_amount)
    {

        if (is_null($payable_amount)) {
            throw new \InvalidArgumentException('non-nullable payable_amount cannot be null');
        }

        $this->container['payable_amount'] = $payable_amount;

        return $this;
    }

    /**
     * Gets payable_amount_currency
     *
     * @return string
     */
    public function getPayableAmountCurrency()
    {
        return $this->container['payable_amount_currency'];
    }

    /**
     * Sets payable_amount_currency
     *
     * @param string $payable_amount_currency Payable amount currency. eg: INR, USD etc.,.
     *
     * @return self
     */
    public function setPayableAmountCurrency($payable_amount_currency)
    {

        if (is_null($payable_amount_currency)) {
            throw new \InvalidArgumentException('non-nullable payable_amount_currency cannot be null');
        }

        $this->container['payable_amount_currency'] = $payable_amount_currency;

        return $this;
    }

    /**
     * Gets approved_at_utc
     *
     * @return \DateTime|null
     */
    public function getApprovedAtUtc()
    {
        return $this->container['approved_at_utc'];
    }

    /**
     * Sets approved_at_utc
     *
     * @param \DateTime|null $approved_at_utc DateTime of approval in UTC timezone.
     *
     * @return self
     */
    public function setApprovedAtUtc($approved_at_utc)
    {

        if (is_null($approved_at_utc)) {
            throw new \InvalidArgumentException('non-nullable approved_at_utc cannot be null');
        }

        $this->container['approved_at_utc'] = $approved_at_utc;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


