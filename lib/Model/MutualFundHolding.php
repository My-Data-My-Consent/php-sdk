<?php
/**
 * MutualFundHolding
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDataMyConsent
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * My Data My Consent - Developer API
 *
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDataMyConsent\Model;

use \ArrayAccess;
use \MyDataMyConsent\ObjectSerializer;

/**
 * MutualFundHolding Class Doc Comment
 *
 * @category Class
 * @package  MyDataMyConsent
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class MutualFundHolding implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'MutualFundHolding';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'amc' => 'string',
        'registrar' => 'string',
        'scheme_code' => 'string',
        'isin' => 'string',
        'ucc' => 'string',
        'amfi_code' => 'string',
        'folio_no' => 'string',
        'dividend_type' => 'string',
        'fatca_status' => 'string',
        'mode' => '\MyDataMyConsent\Model\MutualFundHoldingMode',
        'units' => 'float',
        'closing_units' => 'string',
        'lien_units' => 'string',
        'rate' => 'string',
        'nav' => 'string',
        'locking_units' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'amc' => null,
        'registrar' => null,
        'scheme_code' => null,
        'isin' => null,
        'ucc' => null,
        'amfi_code' => null,
        'folio_no' => null,
        'dividend_type' => null,
        'fatca_status' => null,
        'mode' => null,
        'units' => 'double',
        'closing_units' => null,
        'lien_units' => null,
        'rate' => null,
        'nav' => null,
        'locking_units' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
		'amc' => false,
		'registrar' => false,
		'scheme_code' => false,
		'isin' => false,
		'ucc' => false,
		'amfi_code' => false,
		'folio_no' => false,
		'dividend_type' => false,
		'fatca_status' => false,
		'mode' => false,
		'units' => false,
		'closing_units' => false,
		'lien_units' => false,
		'rate' => false,
		'nav' => false,
		'locking_units' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'amc' => 'amc',
        'registrar' => 'registrar',
        'scheme_code' => 'schemeCode',
        'isin' => 'isin',
        'ucc' => 'ucc',
        'amfi_code' => 'amfiCode',
        'folio_no' => 'folioNo',
        'dividend_type' => 'dividendType',
        'fatca_status' => 'fatcaStatus',
        'mode' => 'mode',
        'units' => 'units',
        'closing_units' => 'closingUnits',
        'lien_units' => 'lienUnits',
        'rate' => 'rate',
        'nav' => 'nav',
        'locking_units' => 'lockingUnits'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'amc' => 'setAmc',
        'registrar' => 'setRegistrar',
        'scheme_code' => 'setSchemeCode',
        'isin' => 'setIsin',
        'ucc' => 'setUcc',
        'amfi_code' => 'setAmfiCode',
        'folio_no' => 'setFolioNo',
        'dividend_type' => 'setDividendType',
        'fatca_status' => 'setFatcaStatus',
        'mode' => 'setMode',
        'units' => 'setUnits',
        'closing_units' => 'setClosingUnits',
        'lien_units' => 'setLienUnits',
        'rate' => 'setRate',
        'nav' => 'setNav',
        'locking_units' => 'setLockingUnits'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'amc' => 'getAmc',
        'registrar' => 'getRegistrar',
        'scheme_code' => 'getSchemeCode',
        'isin' => 'getIsin',
        'ucc' => 'getUcc',
        'amfi_code' => 'getAmfiCode',
        'folio_no' => 'getFolioNo',
        'dividend_type' => 'getDividendType',
        'fatca_status' => 'getFatcaStatus',
        'mode' => 'getMode',
        'units' => 'getUnits',
        'closing_units' => 'getClosingUnits',
        'lien_units' => 'getLienUnits',
        'rate' => 'getRate',
        'nav' => 'getNav',
        'locking_units' => 'getLockingUnits'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('amc', $data ?? [], null);
        $this->setIfExists('registrar', $data ?? [], null);
        $this->setIfExists('scheme_code', $data ?? [], null);
        $this->setIfExists('isin', $data ?? [], null);
        $this->setIfExists('ucc', $data ?? [], null);
        $this->setIfExists('amfi_code', $data ?? [], null);
        $this->setIfExists('folio_no', $data ?? [], null);
        $this->setIfExists('dividend_type', $data ?? [], null);
        $this->setIfExists('fatca_status', $data ?? [], null);
        $this->setIfExists('mode', $data ?? [], null);
        $this->setIfExists('units', $data ?? [], null);
        $this->setIfExists('closing_units', $data ?? [], null);
        $this->setIfExists('lien_units', $data ?? [], null);
        $this->setIfExists('rate', $data ?? [], null);
        $this->setIfExists('nav', $data ?? [], null);
        $this->setIfExists('locking_units', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['isin'] === null) {
            $invalidProperties[] = "'isin' can't be null";
        }
        if ($this->container['folio_no'] === null) {
            $invalidProperties[] = "'folio_no' can't be null";
        }
        if ($this->container['mode'] === null) {
            $invalidProperties[] = "'mode' can't be null";
        }
        if ($this->container['units'] === null) {
            $invalidProperties[] = "'units' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {

        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets amc
     *
     * @return string|null
     */
    public function getAmc()
    {
        return $this->container['amc'];
    }

    /**
     * Sets amc
     *
     * @param string|null $amc amc
     *
     * @return self
     */
    public function setAmc($amc)
    {

        if (is_null($amc)) {
            throw new \InvalidArgumentException('non-nullable amc cannot be null');
        }

        $this->container['amc'] = $amc;

        return $this;
    }

    /**
     * Gets registrar
     *
     * @return string|null
     */
    public function getRegistrar()
    {
        return $this->container['registrar'];
    }

    /**
     * Sets registrar
     *
     * @param string|null $registrar registrar
     *
     * @return self
     */
    public function setRegistrar($registrar)
    {

        if (is_null($registrar)) {
            throw new \InvalidArgumentException('non-nullable registrar cannot be null');
        }

        $this->container['registrar'] = $registrar;

        return $this;
    }

    /**
     * Gets scheme_code
     *
     * @return string|null
     */
    public function getSchemeCode()
    {
        return $this->container['scheme_code'];
    }

    /**
     * Sets scheme_code
     *
     * @param string|null $scheme_code scheme_code
     *
     * @return self
     */
    public function setSchemeCode($scheme_code)
    {

        if (is_null($scheme_code)) {
            throw new \InvalidArgumentException('non-nullable scheme_code cannot be null');
        }

        $this->container['scheme_code'] = $scheme_code;

        return $this;
    }

    /**
     * Gets isin
     *
     * @return string
     */
    public function getIsin()
    {
        return $this->container['isin'];
    }

    /**
     * Sets isin
     *
     * @param string $isin isin
     *
     * @return self
     */
    public function setIsin($isin)
    {

        if (is_null($isin)) {
            throw new \InvalidArgumentException('non-nullable isin cannot be null');
        }

        $this->container['isin'] = $isin;

        return $this;
    }

    /**
     * Gets ucc
     *
     * @return string|null
     */
    public function getUcc()
    {
        return $this->container['ucc'];
    }

    /**
     * Sets ucc
     *
     * @param string|null $ucc ucc
     *
     * @return self
     */
    public function setUcc($ucc)
    {

        if (is_null($ucc)) {
            throw new \InvalidArgumentException('non-nullable ucc cannot be null');
        }

        $this->container['ucc'] = $ucc;

        return $this;
    }

    /**
     * Gets amfi_code
     *
     * @return string|null
     */
    public function getAmfiCode()
    {
        return $this->container['amfi_code'];
    }

    /**
     * Sets amfi_code
     *
     * @param string|null $amfi_code amfi_code
     *
     * @return self
     */
    public function setAmfiCode($amfi_code)
    {

        if (is_null($amfi_code)) {
            throw new \InvalidArgumentException('non-nullable amfi_code cannot be null');
        }

        $this->container['amfi_code'] = $amfi_code;

        return $this;
    }

    /**
     * Gets folio_no
     *
     * @return string
     */
    public function getFolioNo()
    {
        return $this->container['folio_no'];
    }

    /**
     * Sets folio_no
     *
     * @param string $folio_no folio_no
     *
     * @return self
     */
    public function setFolioNo($folio_no)
    {

        if (is_null($folio_no)) {
            throw new \InvalidArgumentException('non-nullable folio_no cannot be null');
        }

        $this->container['folio_no'] = $folio_no;

        return $this;
    }

    /**
     * Gets dividend_type
     *
     * @return string|null
     */
    public function getDividendType()
    {
        return $this->container['dividend_type'];
    }

    /**
     * Sets dividend_type
     *
     * @param string|null $dividend_type dividend_type
     *
     * @return self
     */
    public function setDividendType($dividend_type)
    {

        if (is_null($dividend_type)) {
            throw new \InvalidArgumentException('non-nullable dividend_type cannot be null');
        }

        $this->container['dividend_type'] = $dividend_type;

        return $this;
    }

    /**
     * Gets fatca_status
     *
     * @return string|null
     */
    public function getFatcaStatus()
    {
        return $this->container['fatca_status'];
    }

    /**
     * Sets fatca_status
     *
     * @param string|null $fatca_status fatca_status
     *
     * @return self
     */
    public function setFatcaStatus($fatca_status)
    {

        if (is_null($fatca_status)) {
            throw new \InvalidArgumentException('non-nullable fatca_status cannot be null');
        }

        $this->container['fatca_status'] = $fatca_status;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return \MyDataMyConsent\Model\MutualFundHoldingMode
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param \MyDataMyConsent\Model\MutualFundHoldingMode $mode mode
     *
     * @return self
     */
    public function setMode($mode)
    {

        if (is_null($mode)) {
            throw new \InvalidArgumentException('non-nullable mode cannot be null');
        }

        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets units
     *
     * @return float
     */
    public function getUnits()
    {
        return $this->container['units'];
    }

    /**
     * Sets units
     *
     * @param float $units units
     *
     * @return self
     */
    public function setUnits($units)
    {

        if (is_null($units)) {
            throw new \InvalidArgumentException('non-nullable units cannot be null');
        }

        $this->container['units'] = $units;

        return $this;
    }

    /**
     * Gets closing_units
     *
     * @return string|null
     */
    public function getClosingUnits()
    {
        return $this->container['closing_units'];
    }

    /**
     * Sets closing_units
     *
     * @param string|null $closing_units closing_units
     *
     * @return self
     */
    public function setClosingUnits($closing_units)
    {

        if (is_null($closing_units)) {
            throw new \InvalidArgumentException('non-nullable closing_units cannot be null');
        }

        $this->container['closing_units'] = $closing_units;

        return $this;
    }

    /**
     * Gets lien_units
     *
     * @return string|null
     */
    public function getLienUnits()
    {
        return $this->container['lien_units'];
    }

    /**
     * Sets lien_units
     *
     * @param string|null $lien_units lien_units
     *
     * @return self
     */
    public function setLienUnits($lien_units)
    {

        if (is_null($lien_units)) {
            throw new \InvalidArgumentException('non-nullable lien_units cannot be null');
        }

        $this->container['lien_units'] = $lien_units;

        return $this;
    }

    /**
     * Gets rate
     *
     * @return string|null
     */
    public function getRate()
    {
        return $this->container['rate'];
    }

    /**
     * Sets rate
     *
     * @param string|null $rate rate
     *
     * @return self
     */
    public function setRate($rate)
    {

        if (is_null($rate)) {
            throw new \InvalidArgumentException('non-nullable rate cannot be null');
        }

        $this->container['rate'] = $rate;

        return $this;
    }

    /**
     * Gets nav
     *
     * @return string|null
     */
    public function getNav()
    {
        return $this->container['nav'];
    }

    /**
     * Sets nav
     *
     * @param string|null $nav nav
     *
     * @return self
     */
    public function setNav($nav)
    {

        if (is_null($nav)) {
            throw new \InvalidArgumentException('non-nullable nav cannot be null');
        }

        $this->container['nav'] = $nav;

        return $this;
    }

    /**
     * Gets locking_units
     *
     * @return string|null
     */
    public function getLockingUnits()
    {
        return $this->container['locking_units'];
    }

    /**
     * Sets locking_units
     *
     * @param string|null $locking_units locking_units
     *
     * @return self
     */
    public function setLockingUnits($locking_units)
    {

        if (is_null($locking_units)) {
            throw new \InvalidArgumentException('non-nullable locking_units cannot be null');
        }

        $this->container['locking_units'] = $locking_units;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


