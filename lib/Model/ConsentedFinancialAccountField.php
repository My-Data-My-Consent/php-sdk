<?php
/**
 * ConsentedFinancialAccountField
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  MyDataMyConsent
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * My Data My Consent - Developer API
 *
 * Unleashing the power of consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: 1.0
 * Contact: support@mydatamyconsent.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDataMyConsent\Model;

use \ArrayAccess;
use \MyDataMyConsent\ObjectSerializer;

/**
 * ConsentedFinancialAccountField Class Doc Comment
 *
 * @category Class
 * @description ConsentedFinancialAccountField : Consented financial account field details.
 * @package  MyDataMyConsent
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ConsentedFinancialAccountField implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ConsentedFinancialAccountField';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'field_title' => 'string',
        'field_slug' => 'string',
        'requested_details' => '\MyDataMyConsent\Model\FinancialAccountDetailsRequired[]',
        'transaction_period' => '\MyDataMyConsent\Model\ConsentedFinancialAccountFieldTransactionPeriod',
        'consented_accounts' => '\MyDataMyConsent\Model\ConsentedFinancialAccount[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'field_title' => null,
        'field_slug' => null,
        'requested_details' => null,
        'transaction_period' => null,
        'consented_accounts' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'field_title' => false,
		'field_slug' => false,
		'requested_details' => false,
		'transaction_period' => false,
		'consented_accounts' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'field_title' => 'fieldTitle',
        'field_slug' => 'fieldSlug',
        'requested_details' => 'requestedDetails',
        'transaction_period' => 'transactionPeriod',
        'consented_accounts' => 'consentedAccounts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'field_title' => 'setFieldTitle',
        'field_slug' => 'setFieldSlug',
        'requested_details' => 'setRequestedDetails',
        'transaction_period' => 'setTransactionPeriod',
        'consented_accounts' => 'setConsentedAccounts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'field_title' => 'getFieldTitle',
        'field_slug' => 'getFieldSlug',
        'requested_details' => 'getRequestedDetails',
        'transaction_period' => 'getTransactionPeriod',
        'consented_accounts' => 'getConsentedAccounts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('field_title', $data ?? [], null);
        $this->setIfExists('field_slug', $data ?? [], null);
        $this->setIfExists('requested_details', $data ?? [], null);
        $this->setIfExists('transaction_period', $data ?? [], null);
        $this->setIfExists('consented_accounts', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['field_title'] === null) {
            $invalidProperties[] = "'field_title' can't be null";
        }
        if ($this->container['field_slug'] === null) {
            $invalidProperties[] = "'field_slug' can't be null";
        }
        if ($this->container['requested_details'] === null) {
            $invalidProperties[] = "'requested_details' can't be null";
        }
        if ($this->container['consented_accounts'] === null) {
            $invalidProperties[] = "'consented_accounts' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets field_title
     *
     * @return string
     */
    public function getFieldTitle()
    {
        return $this->container['field_title'];
    }

    /**
     * Sets field_title
     *
     * @param string $field_title Financial account field title.
     *
     * @return self
     */
    public function setFieldTitle($field_title)
    {

        if (is_null($field_title)) {
            throw new \InvalidArgumentException('non-nullable field_title cannot be null');
        }

        $this->container['field_title'] = $field_title;

        return $this;
    }

    /**
     * Gets field_slug
     *
     * @return string
     */
    public function getFieldSlug()
    {
        return $this->container['field_slug'];
    }

    /**
     * Sets field_slug
     *
     * @param string $field_slug Financial account field slug.
     *
     * @return self
     */
    public function setFieldSlug($field_slug)
    {

        if (is_null($field_slug)) {
            throw new \InvalidArgumentException('non-nullable field_slug cannot be null');
        }

        $this->container['field_slug'] = $field_slug;

        return $this;
    }

    /**
     * Gets requested_details
     *
     * @return \MyDataMyConsent\Model\FinancialAccountDetailsRequired[]
     */
    public function getRequestedDetails()
    {
        return $this->container['requested_details'];
    }

    /**
     * Sets requested_details
     *
     * @param \MyDataMyConsent\Model\FinancialAccountDetailsRequired[] $requested_details Requested financial account details.
     *
     * @return self
     */
    public function setRequestedDetails($requested_details)
    {

        if (is_null($requested_details)) {
            throw new \InvalidArgumentException('non-nullable requested_details cannot be null');
        }

        $this->container['requested_details'] = $requested_details;

        return $this;
    }

    /**
     * Gets transaction_period
     *
     * @return \MyDataMyConsent\Model\ConsentedFinancialAccountFieldTransactionPeriod|null
     */
    public function getTransactionPeriod()
    {
        return $this->container['transaction_period'];
    }

    /**
     * Sets transaction_period
     *
     * @param \MyDataMyConsent\Model\ConsentedFinancialAccountFieldTransactionPeriod|null $transaction_period transaction_period
     *
     * @return self
     */
    public function setTransactionPeriod($transaction_period)
    {

        if (is_null($transaction_period)) {
            throw new \InvalidArgumentException('non-nullable transaction_period cannot be null');
        }

        $this->container['transaction_period'] = $transaction_period;

        return $this;
    }

    /**
     * Gets consented_accounts
     *
     * @return \MyDataMyConsent\Model\ConsentedFinancialAccount[]
     */
    public function getConsentedAccounts()
    {
        return $this->container['consented_accounts'];
    }

    /**
     * Sets consented_accounts
     *
     * @param \MyDataMyConsent\Model\ConsentedFinancialAccount[] $consented_accounts Consented financial accounts.
     *
     * @return self
     */
    public function setConsentedAccounts($consented_accounts)
    {

        if (is_null($consented_accounts)) {
            throw new \InvalidArgumentException('non-nullable consented_accounts cannot be null');
        }

        $this->container['consented_accounts'] = $consented_accounts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


