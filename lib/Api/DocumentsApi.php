<?php
/**
 * DocumentsApi
 * PHP version 7.3
 *
 * @category Class
 * @package  MyDataMyConsent
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDataMyConsent\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use MyDataMyConsent\ApiException;
use MyDataMyConsent\Configuration;
use MyDataMyConsent\HeaderSelector;
use MyDataMyConsent\ObjectSerializer;

/**
 * DocumentsApi Class Doc Comment
 *
 * @category Class
 * @package  MyDataMyConsent
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class DocumentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation issueDocument
     *
     * Issue a new document.
     *
     * @param  \MyDataMyConsent\Model\DocumentIssueRequest $document_issue_request document_issue_request (optional)
     *
     * @throws \MyDataMyConsent\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return |bool|string|\MyDataMyConsent\Model\ProblemDetails
     */
    public function issueDocument($document_issue_request = null)
    {
        list($response) = $this->issueDocumentWithHttpInfo($document_issue_request);
        return $response;
    }

    /**
     * Operation issueDocumentWithHttpInfo
     *
     * Issue a new document.
     *
     * @param  \MyDataMyConsent\Model\DocumentIssueRequest $document_issue_request (optional)
     *
     * @throws \MyDataMyConsent\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of |bool|string|\MyDataMyConsent\Model\ProblemDetails, HTTP status code, HTTP response headers (array of strings)
     */
    public function issueDocumentWithHttpInfo($document_issue_request = null)
    {
        $request = $this->issueDocumentRequest($document_issue_request);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('bool' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'bool', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\MyDataMyConsent\Model\ProblemDetails' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\MyDataMyConsent\Model\ProblemDetails', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'bool';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\MyDataMyConsent\Model\ProblemDetails',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation issueDocumentAsync
     *
     * Issue a new document.
     *
     * @param  \MyDataMyConsent\Model\DocumentIssueRequest $document_issue_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function issueDocumentAsync($document_issue_request = null)
    {
        return $this->issueDocumentAsyncWithHttpInfo($document_issue_request)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation issueDocumentAsyncWithHttpInfo
     *
     * Issue a new document.
     *
     * @param  \MyDataMyConsent\Model\DocumentIssueRequest $document_issue_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function issueDocumentAsyncWithHttpInfo($document_issue_request = null)
    {
        $returnType = 'bool';
        $request = $this->issueDocumentRequest($document_issue_request);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'issueDocument'
     *
     * @param  \MyDataMyConsent\Model\DocumentIssueRequest $document_issue_request (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function issueDocumentRequest($document_issue_request = null)
    {

        $resourcePath = '/v1/documents/issue';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($document_issue_request)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($document_issue_request));
            } else {
                $httpBody = $document_issue_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1DocumentsIssuedDocumentIdGet
     *
     * Get issued document.
     *
     * @param  string $document_id Document id. (required)
     *
     * @throws \MyDataMyConsent\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1DocumentsIssuedDocumentIdGet($document_id)
    {
        $this->v1DocumentsIssuedDocumentIdGetWithHttpInfo($document_id);
    }

    /**
     * Operation v1DocumentsIssuedDocumentIdGetWithHttpInfo
     *
     * Get issued document.
     *
     * @param  string $document_id Document id. (required)
     *
     * @throws \MyDataMyConsent\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1DocumentsIssuedDocumentIdGetWithHttpInfo($document_id)
    {
        $request = $this->v1DocumentsIssuedDocumentIdGetRequest($document_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v1DocumentsIssuedDocumentIdGetAsync
     *
     * Get issued document.
     *
     * @param  string $document_id Document id. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DocumentsIssuedDocumentIdGetAsync($document_id)
    {
        return $this->v1DocumentsIssuedDocumentIdGetAsyncWithHttpInfo($document_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1DocumentsIssuedDocumentIdGetAsyncWithHttpInfo
     *
     * Get issued document.
     *
     * @param  string $document_id Document id. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DocumentsIssuedDocumentIdGetAsyncWithHttpInfo($document_id)
    {
        $returnType = '';
        $request = $this->v1DocumentsIssuedDocumentIdGetRequest($document_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1DocumentsIssuedDocumentIdGet'
     *
     * @param  string $document_id Document id. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1DocumentsIssuedDocumentIdGetRequest($document_id)
    {
        // verify the required parameter 'document_id' is set
        if ($document_id === null || (is_array($document_id) && count($document_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $document_id when calling v1DocumentsIssuedDocumentIdGet'
            );
        }

        $resourcePath = '/v1/documents/issued/{documentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($document_id !== null) {
            $resourcePath = str_replace(
                '{' . 'documentId' . '}',
                ObjectSerializer::toPathValue($document_id),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1DocumentsIssuedGet
     *
     * Get issued documents.
     *
     * @param  string $document_type_id document_type_id (optional)
     * @param  \DateTime $from_date_time from_date_time (optional)
     * @param  \DateTime $to_date_time to_date_time (optional)
     * @param  int $page_size page_size (optional, default to 25)
     * @param  int $page_no page_no (optional, default to 1)
     *
     * @throws \MyDataMyConsent\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1DocumentsIssuedGet($document_type_id = null, $from_date_time = null, $to_date_time = null, $page_size = 25, $page_no = 1)
    {
        $this->v1DocumentsIssuedGetWithHttpInfo($document_type_id, $from_date_time, $to_date_time, $page_size, $page_no);
    }

    /**
     * Operation v1DocumentsIssuedGetWithHttpInfo
     *
     * Get issued documents.
     *
     * @param  string $document_type_id (optional)
     * @param  \DateTime $from_date_time (optional)
     * @param  \DateTime $to_date_time (optional)
     * @param  int $page_size (optional, default to 25)
     * @param  int $page_no (optional, default to 1)
     *
     * @throws \MyDataMyConsent\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1DocumentsIssuedGetWithHttpInfo($document_type_id = null, $from_date_time = null, $to_date_time = null, $page_size = 25, $page_no = 1)
    {
        $request = $this->v1DocumentsIssuedGetRequest($document_type_id, $from_date_time, $to_date_time, $page_size, $page_no);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v1DocumentsIssuedGetAsync
     *
     * Get issued documents.
     *
     * @param  string $document_type_id (optional)
     * @param  \DateTime $from_date_time (optional)
     * @param  \DateTime $to_date_time (optional)
     * @param  int $page_size (optional, default to 25)
     * @param  int $page_no (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DocumentsIssuedGetAsync($document_type_id = null, $from_date_time = null, $to_date_time = null, $page_size = 25, $page_no = 1)
    {
        return $this->v1DocumentsIssuedGetAsyncWithHttpInfo($document_type_id, $from_date_time, $to_date_time, $page_size, $page_no)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1DocumentsIssuedGetAsyncWithHttpInfo
     *
     * Get issued documents.
     *
     * @param  string $document_type_id (optional)
     * @param  \DateTime $from_date_time (optional)
     * @param  \DateTime $to_date_time (optional)
     * @param  int $page_size (optional, default to 25)
     * @param  int $page_no (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DocumentsIssuedGetAsyncWithHttpInfo($document_type_id = null, $from_date_time = null, $to_date_time = null, $page_size = 25, $page_no = 1)
    {
        $returnType = '';
        $request = $this->v1DocumentsIssuedGetRequest($document_type_id, $from_date_time, $to_date_time, $page_size, $page_no);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1DocumentsIssuedGet'
     *
     * @param  string $document_type_id (optional)
     * @param  \DateTime $from_date_time (optional)
     * @param  \DateTime $to_date_time (optional)
     * @param  int $page_size (optional, default to 25)
     * @param  int $page_no (optional, default to 1)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1DocumentsIssuedGetRequest($document_type_id = null, $from_date_time = null, $to_date_time = null, $page_size = 25, $page_no = 1)
    {

        $resourcePath = '/v1/documents/issued';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($document_type_id !== null) {
            if('form' === 'form' && is_array($document_type_id)) {
                foreach($document_type_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['documentTypeId'] = $document_type_id;
            }
        }
        // query params
        if ($from_date_time !== null) {
            if('form' === 'form' && is_array($from_date_time)) {
                foreach($from_date_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['fromDateTime'] = $from_date_time;
            }
        }
        // query params
        if ($to_date_time !== null) {
            if('form' === 'form' && is_array($to_date_time)) {
                foreach($to_date_time as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['toDateTime'] = $to_date_time;
            }
        }
        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }
        // query params
        if ($page_no !== null) {
            if('form' === 'form' && is_array($page_no)) {
                foreach($page_no as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageNo'] = $page_no;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation v1DocumentsTypesGet
     *
     * Get registered document types.
     *
     * @param  int $page_size page_size (optional)
     * @param  int $page_no page_no (optional)
     *
     * @throws \MyDataMyConsent\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function v1DocumentsTypesGet($page_size = null, $page_no = null)
    {
        $this->v1DocumentsTypesGetWithHttpInfo($page_size, $page_no);
    }

    /**
     * Operation v1DocumentsTypesGetWithHttpInfo
     *
     * Get registered document types.
     *
     * @param  int $page_size (optional)
     * @param  int $page_no (optional)
     *
     * @throws \MyDataMyConsent\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function v1DocumentsTypesGetWithHttpInfo($page_size = null, $page_no = null)
    {
        $request = $this->v1DocumentsTypesGetRequest($page_size, $page_no);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation v1DocumentsTypesGetAsync
     *
     * Get registered document types.
     *
     * @param  int $page_size (optional)
     * @param  int $page_no (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DocumentsTypesGetAsync($page_size = null, $page_no = null)
    {
        return $this->v1DocumentsTypesGetAsyncWithHttpInfo($page_size, $page_no)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation v1DocumentsTypesGetAsyncWithHttpInfo
     *
     * Get registered document types.
     *
     * @param  int $page_size (optional)
     * @param  int $page_no (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function v1DocumentsTypesGetAsyncWithHttpInfo($page_size = null, $page_no = null)
    {
        $returnType = '';
        $request = $this->v1DocumentsTypesGetRequest($page_size, $page_no);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'v1DocumentsTypesGet'
     *
     * @param  int $page_size (optional)
     * @param  int $page_no (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function v1DocumentsTypesGetRequest($page_size = null, $page_no = null)
    {

        $resourcePath = '/v1/documents/types';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($page_size !== null) {
            if('form' === 'form' && is_array($page_size)) {
                foreach($page_size as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageSize'] = $page_size;
            }
        }
        // query params
        if ($page_no !== null) {
            if('form' === 'form' && is_array($page_no)) {
                foreach($page_no as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['pageNo'] = $page_no;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
