<?php
/**
 * RefreshToken
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  MyDataMyConsent
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent by establishing trust. The Platform Core Developer API defines a set of capabilities that can be used to request, issue, manage and update data, documents and credentials by organizations. The API can be used to request, manage and update Decentralised Identifiers, Financial Data, Health Data issue Documents, Credentials directly or using OpenID Connect flows, and verify Messages signed with DIDs and much more.
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDataMyConsent\Model;

use \ArrayAccess;
use \MyDataMyConsent\ObjectSerializer;

/**
 * RefreshToken Class Doc Comment
 *
 * @category Class
 * @package  MyDataMyConsent
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class RefreshToken implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RefreshToken';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'created_by' => 'string',
        'created_at_utc' => '\DateTime',
        'updated_by' => 'string',
        'updated_at_utc' => '\DateTime',
        'created_by_user' => '\MyDataMyConsent\Model\ApplicationUser',
        'updated_by_user' => '\MyDataMyConsent\Model\ApplicationUser',
        'deleted_by' => 'string',
        'deleted_at_utc' => '\DateTime',
        'deleted_by_user' => '\MyDataMyConsent\Model\ApplicationUser',
        'id' => 'string',
        'installation_id' => 'string',
        'token' => 'string',
        'access_token' => 'string',
        'access_token_expires' => '\DateTime',
        'expires' => '\DateTime',
        'is_expired' => 'bool',
        'created' => '\DateTime',
        'revoked' => '\DateTime',
        'is_active' => 'bool',
        'user_id' => 'string',
        'user' => '\MyDataMyConsent\Model\ApplicationUser'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'created_by' => 'uuid',
        'created_at_utc' => 'date-time',
        'updated_by' => 'uuid',
        'updated_at_utc' => 'date-time',
        'created_by_user' => null,
        'updated_by_user' => null,
        'deleted_by' => 'uuid',
        'deleted_at_utc' => 'date-time',
        'deleted_by_user' => null,
        'id' => 'uuid',
        'installation_id' => null,
        'token' => null,
        'access_token' => null,
        'access_token_expires' => 'date-time',
        'expires' => 'date-time',
        'is_expired' => null,
        'created' => 'date-time',
        'revoked' => 'date-time',
        'is_active' => null,
        'user_id' => 'uuid',
        'user' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created_by' => 'createdBy',
        'created_at_utc' => 'createdAtUtc',
        'updated_by' => 'updatedBy',
        'updated_at_utc' => 'updatedAtUtc',
        'created_by_user' => 'createdByUser',
        'updated_by_user' => 'updatedByUser',
        'deleted_by' => 'deletedBy',
        'deleted_at_utc' => 'deletedAtUtc',
        'deleted_by_user' => 'deletedByUser',
        'id' => 'id',
        'installation_id' => 'installationId',
        'token' => 'token',
        'access_token' => 'accessToken',
        'access_token_expires' => 'accessTokenExpires',
        'expires' => 'expires',
        'is_expired' => 'isExpired',
        'created' => 'created',
        'revoked' => 'revoked',
        'is_active' => 'isActive',
        'user_id' => 'userId',
        'user' => 'user'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created_by' => 'setCreatedBy',
        'created_at_utc' => 'setCreatedAtUtc',
        'updated_by' => 'setUpdatedBy',
        'updated_at_utc' => 'setUpdatedAtUtc',
        'created_by_user' => 'setCreatedByUser',
        'updated_by_user' => 'setUpdatedByUser',
        'deleted_by' => 'setDeletedBy',
        'deleted_at_utc' => 'setDeletedAtUtc',
        'deleted_by_user' => 'setDeletedByUser',
        'id' => 'setId',
        'installation_id' => 'setInstallationId',
        'token' => 'setToken',
        'access_token' => 'setAccessToken',
        'access_token_expires' => 'setAccessTokenExpires',
        'expires' => 'setExpires',
        'is_expired' => 'setIsExpired',
        'created' => 'setCreated',
        'revoked' => 'setRevoked',
        'is_active' => 'setIsActive',
        'user_id' => 'setUserId',
        'user' => 'setUser'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created_by' => 'getCreatedBy',
        'created_at_utc' => 'getCreatedAtUtc',
        'updated_by' => 'getUpdatedBy',
        'updated_at_utc' => 'getUpdatedAtUtc',
        'created_by_user' => 'getCreatedByUser',
        'updated_by_user' => 'getUpdatedByUser',
        'deleted_by' => 'getDeletedBy',
        'deleted_at_utc' => 'getDeletedAtUtc',
        'deleted_by_user' => 'getDeletedByUser',
        'id' => 'getId',
        'installation_id' => 'getInstallationId',
        'token' => 'getToken',
        'access_token' => 'getAccessToken',
        'access_token_expires' => 'getAccessTokenExpires',
        'expires' => 'getExpires',
        'is_expired' => 'getIsExpired',
        'created' => 'getCreated',
        'revoked' => 'getRevoked',
        'is_active' => 'getIsActive',
        'user_id' => 'getUserId',
        'user' => 'getUser'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created_by'] = $data['created_by'] ?? null;
        $this->container['created_at_utc'] = $data['created_at_utc'] ?? null;
        $this->container['updated_by'] = $data['updated_by'] ?? null;
        $this->container['updated_at_utc'] = $data['updated_at_utc'] ?? null;
        $this->container['created_by_user'] = $data['created_by_user'] ?? null;
        $this->container['updated_by_user'] = $data['updated_by_user'] ?? null;
        $this->container['deleted_by'] = $data['deleted_by'] ?? null;
        $this->container['deleted_at_utc'] = $data['deleted_at_utc'] ?? null;
        $this->container['deleted_by_user'] = $data['deleted_by_user'] ?? null;
        $this->container['id'] = $data['id'] ?? null;
        $this->container['installation_id'] = $data['installation_id'] ?? null;
        $this->container['token'] = $data['token'] ?? null;
        $this->container['access_token'] = $data['access_token'] ?? null;
        $this->container['access_token_expires'] = $data['access_token_expires'] ?? null;
        $this->container['expires'] = $data['expires'] ?? null;
        $this->container['is_expired'] = $data['is_expired'] ?? null;
        $this->container['created'] = $data['created'] ?? null;
        $this->container['revoked'] = $data['revoked'] ?? null;
        $this->container['is_active'] = $data['is_active'] ?? null;
        $this->container['user_id'] = $data['user_id'] ?? null;
        $this->container['user'] = $data['user'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created_by
     *
     * @return string|null
     */
    public function getCreatedBy()
    {
        return $this->container['created_by'];
    }

    /**
     * Sets created_by
     *
     * @param string|null $created_by created_by
     *
     * @return self
     */
    public function setCreatedBy($created_by)
    {
        $this->container['created_by'] = $created_by;

        return $this;
    }

    /**
     * Gets created_at_utc
     *
     * @return \DateTime|null
     */
    public function getCreatedAtUtc()
    {
        return $this->container['created_at_utc'];
    }

    /**
     * Sets created_at_utc
     *
     * @param \DateTime|null $created_at_utc created_at_utc
     *
     * @return self
     */
    public function setCreatedAtUtc($created_at_utc)
    {
        $this->container['created_at_utc'] = $created_at_utc;

        return $this;
    }

    /**
     * Gets updated_by
     *
     * @return string|null
     */
    public function getUpdatedBy()
    {
        return $this->container['updated_by'];
    }

    /**
     * Sets updated_by
     *
     * @param string|null $updated_by updated_by
     *
     * @return self
     */
    public function setUpdatedBy($updated_by)
    {
        $this->container['updated_by'] = $updated_by;

        return $this;
    }

    /**
     * Gets updated_at_utc
     *
     * @return \DateTime|null
     */
    public function getUpdatedAtUtc()
    {
        return $this->container['updated_at_utc'];
    }

    /**
     * Sets updated_at_utc
     *
     * @param \DateTime|null $updated_at_utc updated_at_utc
     *
     * @return self
     */
    public function setUpdatedAtUtc($updated_at_utc)
    {
        $this->container['updated_at_utc'] = $updated_at_utc;

        return $this;
    }

    /**
     * Gets created_by_user
     *
     * @return \MyDataMyConsent\Model\ApplicationUser|null
     */
    public function getCreatedByUser()
    {
        return $this->container['created_by_user'];
    }

    /**
     * Sets created_by_user
     *
     * @param \MyDataMyConsent\Model\ApplicationUser|null $created_by_user created_by_user
     *
     * @return self
     */
    public function setCreatedByUser($created_by_user)
    {
        $this->container['created_by_user'] = $created_by_user;

        return $this;
    }

    /**
     * Gets updated_by_user
     *
     * @return \MyDataMyConsent\Model\ApplicationUser|null
     */
    public function getUpdatedByUser()
    {
        return $this->container['updated_by_user'];
    }

    /**
     * Sets updated_by_user
     *
     * @param \MyDataMyConsent\Model\ApplicationUser|null $updated_by_user updated_by_user
     *
     * @return self
     */
    public function setUpdatedByUser($updated_by_user)
    {
        $this->container['updated_by_user'] = $updated_by_user;

        return $this;
    }

    /**
     * Gets deleted_by
     *
     * @return string|null
     */
    public function getDeletedBy()
    {
        return $this->container['deleted_by'];
    }

    /**
     * Sets deleted_by
     *
     * @param string|null $deleted_by deleted_by
     *
     * @return self
     */
    public function setDeletedBy($deleted_by)
    {
        $this->container['deleted_by'] = $deleted_by;

        return $this;
    }

    /**
     * Gets deleted_at_utc
     *
     * @return \DateTime|null
     */
    public function getDeletedAtUtc()
    {
        return $this->container['deleted_at_utc'];
    }

    /**
     * Sets deleted_at_utc
     *
     * @param \DateTime|null $deleted_at_utc deleted_at_utc
     *
     * @return self
     */
    public function setDeletedAtUtc($deleted_at_utc)
    {
        $this->container['deleted_at_utc'] = $deleted_at_utc;

        return $this;
    }

    /**
     * Gets deleted_by_user
     *
     * @return \MyDataMyConsent\Model\ApplicationUser|null
     */
    public function getDeletedByUser()
    {
        return $this->container['deleted_by_user'];
    }

    /**
     * Sets deleted_by_user
     *
     * @param \MyDataMyConsent\Model\ApplicationUser|null $deleted_by_user deleted_by_user
     *
     * @return self
     */
    public function setDeletedByUser($deleted_by_user)
    {
        $this->container['deleted_by_user'] = $deleted_by_user;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets installation_id
     *
     * @return string|null
     */
    public function getInstallationId()
    {
        return $this->container['installation_id'];
    }

    /**
     * Sets installation_id
     *
     * @param string|null $installation_id installation_id
     *
     * @return self
     */
    public function setInstallationId($installation_id)
    {
        $this->container['installation_id'] = $installation_id;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token token
     *
     * @return self
     */
    public function setToken($token)
    {
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets access_token
     *
     * @return string|null
     */
    public function getAccessToken()
    {
        return $this->container['access_token'];
    }

    /**
     * Sets access_token
     *
     * @param string|null $access_token access_token
     *
     * @return self
     */
    public function setAccessToken($access_token)
    {
        $this->container['access_token'] = $access_token;

        return $this;
    }

    /**
     * Gets access_token_expires
     *
     * @return \DateTime|null
     */
    public function getAccessTokenExpires()
    {
        return $this->container['access_token_expires'];
    }

    /**
     * Sets access_token_expires
     *
     * @param \DateTime|null $access_token_expires access_token_expires
     *
     * @return self
     */
    public function setAccessTokenExpires($access_token_expires)
    {
        $this->container['access_token_expires'] = $access_token_expires;

        return $this;
    }

    /**
     * Gets expires
     *
     * @return \DateTime|null
     */
    public function getExpires()
    {
        return $this->container['expires'];
    }

    /**
     * Sets expires
     *
     * @param \DateTime|null $expires expires
     *
     * @return self
     */
    public function setExpires($expires)
    {
        $this->container['expires'] = $expires;

        return $this;
    }

    /**
     * Gets is_expired
     *
     * @return bool|null
     */
    public function getIsExpired()
    {
        return $this->container['is_expired'];
    }

    /**
     * Sets is_expired
     *
     * @param bool|null $is_expired is_expired
     *
     * @return self
     */
    public function setIsExpired($is_expired)
    {
        $this->container['is_expired'] = $is_expired;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime|null $created created
     *
     * @return self
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets revoked
     *
     * @return \DateTime|null
     */
    public function getRevoked()
    {
        return $this->container['revoked'];
    }

    /**
     * Sets revoked
     *
     * @param \DateTime|null $revoked revoked
     *
     * @return self
     */
    public function setRevoked($revoked)
    {
        $this->container['revoked'] = $revoked;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool|null
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool|null $is_active is_active
     *
     * @return self
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \MyDataMyConsent\Model\ApplicationUser|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \MyDataMyConsent\Model\ApplicationUser|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        $this->container['user'] = $user;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


