<?php
/**
 * GenericPushDocumentRequest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  MyDataMyConsent
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * My Data My Consent - Developer API
 *
 * Unleashing the power of data consent
 *
 * The version of the OpenAPI document: v1
 * Contact: support@mydatamyconsent.com
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace MyDataMyConsent\Model;

use \ArrayAccess;
use \MyDataMyConsent\ObjectSerializer;

/**
 * GenericPushDocumentRequest Class Doc Comment
 *
 * @category Class
 * @package  MyDataMyConsent
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class GenericPushDocumentRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GenericPushDocumentRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'consent_id' => 'string',
        'organization_id' => 'string',
        'user_id' => 'string',
        'document_type' => 'string',
        'document_name' => 'string',
        'is_digitally_signed' => 'bool',
        'digitally_signed_at' => 'string',
        'document_meta_data' => 'string',
        'document_content' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'consent_id' => null,
        'organization_id' => 'uuid',
        'user_id' => 'uuid',
        'document_type' => 'uuid',
        'document_name' => null,
        'is_digitally_signed' => null,
        'digitally_signed_at' => null,
        'document_meta_data' => null,
        'document_content' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'consent_id' => 'consentId',
        'organization_id' => 'organizationId',
        'user_id' => 'userId',
        'document_type' => 'documentType',
        'document_name' => 'documentName',
        'is_digitally_signed' => 'isDigitallySigned',
        'digitally_signed_at' => 'digitallySignedAt',
        'document_meta_data' => 'documentMetaData',
        'document_content' => 'documentContent'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'consent_id' => 'setConsentId',
        'organization_id' => 'setOrganizationId',
        'user_id' => 'setUserId',
        'document_type' => 'setDocumentType',
        'document_name' => 'setDocumentName',
        'is_digitally_signed' => 'setIsDigitallySigned',
        'digitally_signed_at' => 'setDigitallySignedAt',
        'document_meta_data' => 'setDocumentMetaData',
        'document_content' => 'setDocumentContent'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'consent_id' => 'getConsentId',
        'organization_id' => 'getOrganizationId',
        'user_id' => 'getUserId',
        'document_type' => 'getDocumentType',
        'document_name' => 'getDocumentName',
        'is_digitally_signed' => 'getIsDigitallySigned',
        'digitally_signed_at' => 'getDigitallySignedAt',
        'document_meta_data' => 'getDocumentMetaData',
        'document_content' => 'getDocumentContent'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['consent_id'] = $data['consent_id'] ?? null;
        $this->container['organization_id'] = $data['organization_id'] ?? null;
        $this->container['user_id'] = $data['user_id'] ?? null;
        $this->container['document_type'] = $data['document_type'] ?? null;
        $this->container['document_name'] = $data['document_name'] ?? null;
        $this->container['is_digitally_signed'] = $data['is_digitally_signed'] ?? null;
        $this->container['digitally_signed_at'] = $data['digitally_signed_at'] ?? null;
        $this->container['document_meta_data'] = $data['document_meta_data'] ?? null;
        $this->container['document_content'] = $data['document_content'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['consent_id'] === null) {
            $invalidProperties[] = "'consent_id' can't be null";
        }
        if ($this->container['organization_id'] === null) {
            $invalidProperties[] = "'organization_id' can't be null";
        }
        if ($this->container['user_id'] === null) {
            $invalidProperties[] = "'user_id' can't be null";
        }
        if ($this->container['document_type'] === null) {
            $invalidProperties[] = "'document_type' can't be null";
        }
        if ($this->container['document_name'] === null) {
            $invalidProperties[] = "'document_name' can't be null";
        }
        if ($this->container['is_digitally_signed'] === null) {
            $invalidProperties[] = "'is_digitally_signed' can't be null";
        }
        if ($this->container['digitally_signed_at'] === null) {
            $invalidProperties[] = "'digitally_signed_at' can't be null";
        }
        if ($this->container['document_meta_data'] === null) {
            $invalidProperties[] = "'document_meta_data' can't be null";
        }
        if ($this->container['document_content'] === null) {
            $invalidProperties[] = "'document_content' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets consent_id
     *
     * @return string
     */
    public function getConsentId()
    {
        return $this->container['consent_id'];
    }

    /**
     * Sets consent_id
     *
     * @param string $consent_id consent_id
     *
     * @return self
     */
    public function setConsentId($consent_id)
    {
        $this->container['consent_id'] = $consent_id;

        return $this;
    }

    /**
     * Gets organization_id
     *
     * @return string
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param string $organization_id organization_id
     *
     * @return self
     */
    public function setOrganizationId($organization_id)
    {
        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return string
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param string $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return string
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param string $document_type document_type
     *
     * @return self
     */
    public function setDocumentType($document_type)
    {
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets document_name
     *
     * @return string
     */
    public function getDocumentName()
    {
        return $this->container['document_name'];
    }

    /**
     * Sets document_name
     *
     * @param string $document_name document_name
     *
     * @return self
     */
    public function setDocumentName($document_name)
    {
        $this->container['document_name'] = $document_name;

        return $this;
    }

    /**
     * Gets is_digitally_signed
     *
     * @return bool
     */
    public function getIsDigitallySigned()
    {
        return $this->container['is_digitally_signed'];
    }

    /**
     * Sets is_digitally_signed
     *
     * @param bool $is_digitally_signed is_digitally_signed
     *
     * @return self
     */
    public function setIsDigitallySigned($is_digitally_signed)
    {
        $this->container['is_digitally_signed'] = $is_digitally_signed;

        return $this;
    }

    /**
     * Gets digitally_signed_at
     *
     * @return string
     */
    public function getDigitallySignedAt()
    {
        return $this->container['digitally_signed_at'];
    }

    /**
     * Sets digitally_signed_at
     *
     * @param string $digitally_signed_at digitally_signed_at
     *
     * @return self
     */
    public function setDigitallySignedAt($digitally_signed_at)
    {
        $this->container['digitally_signed_at'] = $digitally_signed_at;

        return $this;
    }

    /**
     * Gets document_meta_data
     *
     * @return string
     */
    public function getDocumentMetaData()
    {
        return $this->container['document_meta_data'];
    }

    /**
     * Sets document_meta_data
     *
     * @param string $document_meta_data document_meta_data
     *
     * @return self
     */
    public function setDocumentMetaData($document_meta_data)
    {
        $this->container['document_meta_data'] = $document_meta_data;

        return $this;
    }

    /**
     * Gets document_content
     *
     * @return string
     */
    public function getDocumentContent()
    {
        return $this->container['document_content'];
    }

    /**
     * Sets document_content
     *
     * @param string $document_content document_content
     *
     * @return self
     */
    public function setDocumentContent($document_content)
    {
        $this->container['document_content'] = $document_content;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


